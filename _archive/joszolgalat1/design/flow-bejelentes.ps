%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: flow-bejelentes.pdf
%%Creator: Adobe Acrobat 9.5.0
%%For: gabor
%%CreationDate: 04/03/2013, 04:10:37 PM
%%BoundingBox: 0 0 595 842
%%HiResBoundingBox: 0 0.2621 595 841.7379
%%CropBox: 0 0.2621 595 841.7379
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 454 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:CreatorTool="cairo 1.9.5 (http://cairographics.org)"
   pdf:Producer="cairo 1.9.5 (http://cairographics.org)"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 3 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [595 842 ] >> setpagedevice
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -842 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 .262115 mo
0 841.738 li
595 841.738 li
595 .262115 li
cp
clp
[.999496 0 0 .999496 0 .262115 ]ct
18 18 mo
576.379 18 li
576.379 18.621 li
18 18.621 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.202914 .15906 .15906 0 cmyk
f
576.379 18 mo
577 18 li
577 1241.37 li
576.379 1241.37 li
cp
f
18 18.621 mo
18.621 18.621 li
18.621 1241.99 li
18 1241.99 li
cp
f
155.984 149.863 mo
202.691 149.863 li
202.691 187.226 li
155.984 187.226 li
cp
.233585 .0486458 0 0 cmyk
f
.934106 lw
0 lc
1 lj
4 ml
[] 0 dsh
true sadj
155.984 149.863 mo
202.691 149.863 li
202.691 187.226 li
155.984 187.226 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /NTMBAA+NimbusSansL def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050URW\\051++,Copyright 1999 by \\050URW\\051++ Design & Development; Cyrillic glyphs added by Valek Filippov \\050C\\051 2001-2005) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /S put
dup 2 /M put
dup 3 /space put
dup 4 /G put
dup 5 /a put
dup 6 /t put
dup 7 /e put
dup 8 /w put
dup 9 /y put
def
/UniqueID 5020902 def
/FontBBox {-174 -285 1022 953} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/BlueScale 0.039625 def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [69 74 78 83] def
/StemSnapV [78 85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C6FC13C6804DD38B3838546
BC02868315F05939B1331BBA956778A7C2FDE97116FDBE18AD2E7148318A34F8
00F816E12331AAA45A25E3DCA61A2A6892214B948DFC9D2C855F9D5CF7529CA9
90E990C1B588A724500E6D41B066BDFCBFFCE362E94529033CDFFA0732A883ED
E655DCDD45C29CE161943000C4DCF7BDEDDA59E1199248026AC25351D32C2FBA
B0B3AE7044B5666F2045C52FD7522FA3C94BBDBAF08D4357E98013> |-
/M <1C60D8A8C9B6B41CC7BE69C4E2D63C8CEE27AC369B403B3BCD832EED599C
0B5866AC50CFE73AD18D684D0DF42BDAE9637685FF00601D38736F257840280D
529B84AE9FE288> |-
/space <1C60D8A8C9B854D00D> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B8D7D4E800703E3F
5547D30958210F5111A006B1EE2B15C67E5E461B40E366672CBC37FE7D88DE2D
351AD1A29B5743A8BF4904EB0F5324C429F92A63AB619E344322C962E9BE4332
3CBAD0045E8439E487ADC4E8D6CE65585E7B347825E0A3F70891E67B1D6E594E
87B7F77BBF08F6A3> |-
/a <1C60D8A8C9B7EF32A8307F9C9C9C1562125AAF0EAC379C4EB923924D93C1
D8BFBDC4959A62C25B47D7E0C2389CF442B72A10BE694E8FC6C2D75F8CE1E4A9
EE0AAB2D3CBCFB1EC243DB8B12425FA64FF425875D8BD431F01D75276804455F
7111DE2D8B3CD93475BD195E82FC06908341E3A4BCCF5B55A0B428F67C61B656
3899DC7552A1FF447B2794EC154983137768B4E44678B0736A73D3FB8D8E1F62
29C874B9483907E95DF5308CE5FE780B1ECA5D5F5828CE343D355777E6966230
3D02AFFD394ECBC808502715FB9D57830BB79D364C7CA660> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E61F5A1C77D8B45A75931789665CD227
1E7ABC96DBF49954931254E5E530820E3C2BF572BCBB5518242C1BD8F6BF5123
C33BA0DBBB4CEF510F6377434E021A7A23> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277B585CDD0112F0235682F1F
AADCE97864FBB247AB52C5A3DBFB9282B1139AC460CAE478D5EC2E853304DA56
AC4DCA8536ADA18B3B7CF633FB44A5867E5C2C32D1F60D807C10006A8B97E8E3
314E7D31E2C40CEC25A349C09889FA2FA188C7997AEE40> |-
/w <1C60D8A8C9B6079F1E769DA749A2C287D29AEC2B8DB0640FDF23343FF4BB
85AD8A51E1A4F94E03CA559C6FCDEEEE01514238EB13EB45CDFF4864BE027268> |-
/y <1C60D8A8C9B7A73DB5828E2DB40A4006345BB6B47E4ECD963FC869C23699
86F6D079AC4A862814B9396DB438A1862183CED867E3C44BB9307A0DC4ECC06C
FABB472C23DE9B2490AEC3A42E4087C795FBC47D05CCB5> |-
/.notdef <1C60D8A8C9B854D08819FFA2> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL /NTMBAA+NimbusSansL findfont ct_VMDictPut
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y 246{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
161.354 170.415 mo
(\001\002\001\003\004\005\006\007\010\005\011)
[3.73833 4.66862 3.73833 1.55809 4.35481 3.11617 1.55809 3.11057 4.05215 3.11057 0 ]xsh
165.324 199.371 mo
202.688 199.371 li
193.348 236.738 li
155.984 236.738 li
cp
.233585 .0486458 0 0 cmyk
f
165.324 199.371 mo
202.688 199.371 li
193.348 236.738 li
155.984 236.738 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Udieresis <1C60D8A8C9B6079FE1CE3162C8E8AE16A3C0C7884D51BE903B91
FA7810DDFB864DCD7DF200CE283E9A29DB1E149CFE3B0356232AF99815FAD944
61CB032749507E89A404850C75A08CBB6C77D00566AEEA2DB4F65C6D75D843F3
B6FE3602A41C35D1304D60> |-
/z <1C60D8A8C9B7A73DC507CAD0E5DFE604281BABBC24CC2EF43DFDE4DE216C
EFD6F42680A3650EE853859A3BC4243DD2FD4BAC885F99C725C708D5980315EA
4A644CE35EC39C43AFBE2772774E4789BB43> |-
/n <1C60D8A8C9B7EF327C10274A38D572621753544FF1E6565BDAC07C029793
9439841A815E252CC5E3C14B07914F50F7C417E7F5C3FF22CC1ECEE5C42D8D41
6EAEB65D42312FAD9B5F5F5686DB91AEA66569E3BA61BEFD8FCCA31B49CED485
12A9E594D42E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 10 /Udieresis put
dup 11 /z put
dup 12 /n put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n 243{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
173.264 216.186 mo
(\001\002\001)
[3.73833 4.66862 0 ]xsh
169.995 224.126 mo
(\012\013\007\014\007\006)
[4.04654 2.80232 3.11618 3.11618 3.11617 0 ]xsh
155.984 98.023 mo
202.688 98.023 li
202.688 127.914 li
191.012 127.914 191.012 127.914 179.336 131.648 cv
167.66 135.387 167.66 135.387 155.984 131.648 cv
cp
.233585 .0486458 0 0 cmyk
f
155.984 98.023 mo
202.688 98.023 li
202.688 127.914 li
191.012 127.914 191.012 127.914 179.336 131.648 cv
167.66 135.387 167.66 135.387 155.984 131.648 cv
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7EF325730A29058FA8CFC2032FBB751D1E1EF3168FF63EF0F
2AA9D59B137313F3561BF6477B953B65CB66530C67C081389837C63A347752A2
40F3CDFFFA99E2346581CC86E7D56CA9E2E7823A81824FBD74F061C922B0D1DE
ADD6A6FAA5E7314C2E771ABE272A063477D8A4DCB759C2533E1A79CA06E3095E
CD44EC69B74E7906743D4DCB821B86> |-
/j <1C60D8A8C9B88C087EDD83118CDF9CB83FEBABC4BD6791DC55B768B787B0
DF2C9765E9B7D7AB87717A1B0E0E3DB6E9B8A8CD87A53295334EB3DD72358B8B
09C77C59BECB6628BB> |-
/l <1C60D8A8C9B88C080EC3D3ACB6BBF4E139A0787554C357F685AEB1295F4E
83FB> |-
/eacute <1C60D8A8C9B7EF32A839C1FD591230A166F277FF4D84BAE0C2FCE25
9F07599242BEDE41A518F0F23ECA5C7CF73271A919DE98E16C44676BF32D2FE5
FC407F192DD57CF790DAFE79A6C363CCA60418C4D44680084C8C398140D6E540
6F23CE83BF402683359239501321FC2718B23845B1FC800B64A0F6AC958CA49C
A722C0CD639FB60EFFFCEE0CAF4B4> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 13 /b put
dup 14 /j put
dup 15 /l put
dup 16 /eacute put
dup 17 /s put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n /b /j /l 
/eacute /s 238{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
159.252 114.836 mo
(\001\002\001\003\015\007\016\007\017\007\014\006\020\021)
[3.73833 4.66862 3.73833 1.55809 3.11058 3.11617 1.24423 3.11618 1.24423 3.11617 3.11058 1.55807 
3.11058 0 ]xsh
155.984 255.418 mo
202.691 255.418 li
202.691 292.781 li
155.984 292.781 li
cp
.233585 .0486458 0 0 cmyk
f
155.984 255.418 mo
202.691 255.418 li
202.691 292.781 li
155.984 292.781 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/g <1C60D8A8C9B7EF3227B253BA05132870DDBB17FFCD370206DBCD747C3690
0C34241127202D43AF6F7A5E6F9C8B1B8D6F570458074C06294A247C8425F353
316B952B8D246C8E6BD82365E0F11881BF3FF05B430C8D6F0EBF6D77B85477B0
C12CAA705CDC4E38C4D8CAD5E172651772F1FCC96D6256787CC81CBB6B8DEB64
1FA605F6F2D61E90212799DDE68F03766413068B0738C0B0D21EE900C1FC51A7
BC73788F341AB329E0525E08C7D463B9F42AD6EA8083A4761EEEC577327A1185
BEB1DE473EEF224E385530484B2219B94CE4288EDAC19DFE4BE8A87B> |-
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/h <1C60D8A8C9B7EF325730A2905F1BF4F04617E02042B4D8318F764D94F978
AF3ECE8DAF66DE406CB1C535A13757F089847F9F9C0E5ED386D659E32EE401AA
BAC42E85DA9B68F583DA296B718EDAEB36A66AC9> |-
/u <1C60D8A8C9B7EF32A8358723D0E0769DF18EF85AA750FB259C46BC2EB8E2
DA0FEF4BC23734A2380E7ACA13FB34B1C8A21D9378DEC76900F3FBA900722D76
50DD9A463C12AD5AB681BFAAF75EDD90E5790E9987C3E76A926C1D9539B1FE58
B9F629158A> |-
/r <1C60D8A8C9B81F2C6DADD0309154CC8951B211A2012F90982421AD21C9C7
DA4055467155122F2F178476371544929F7B971A393A82508C01F3C804812E32
E0808D48B6012AC3401ECC0B000D6112A8A938463A2FA5F57E36> |-
/odieresis <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A
52A530B92B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B7
86F401B0C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68853CF3B7D5A2
F0B9A254E5D2F9A40DD165F7AE1AB38B3F> |-
/iacute <1C60D8A8C9B854D088BD32B270B81A69632CC213B306904B55B7687
390098DD97A8CA0FE3A97E79679818E57488F872537B506B3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 18 /o put
dup 19 /g put
dup 20 /period put
dup 21 /h put
dup 22 /u put
dup 23 /r put
dup 24 /odieresis put
dup 25 /iacute put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n /b /j /l 
/eacute /s /o /g /period /h /u /r 
/odieresis /iacute 230{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
161.821 268.496 mo
(\016\022\021\013\022\017\023\005\017\005\006\024\025\026)
[1.24423 3.11617 2.80232 2.80232 3.11618 1.24422 3.11058 3.11618 1.24422 3.11618 1.55809 1.55247 
3.11618 0 ]xsh
163.689 275.969 mo
(\001\002\001\003\012\013\007\014\007\006)
[3.73833 4.66862 3.73833 1.55809 4.04655 2.80231 3.11618 3.11058 3.11617 0 ]xsh
168.126 283.909 mo
(\027\030\023\013\031\006\020\021\007)
[1.8663 3.11618 3.11617 2.80232 1.55249 1.55807 3.11618 2.80232 0 ]xsh
179.336 131.648 mo
179.336 149.863 li
182.137 147.062 mo
179.336 149.863 li
176.535 147.062 li
.616266 .535912 .528435 .253666 cmyk
@
179.336 187.23 mo
179.336 199.371 li
182.137 196.57 mo
179.336 199.371 li
176.535 196.57 li
@
179.336 236.738 mo
179.336 255.418 li
182.137 252.617 mo
179.336 255.418 li
176.535 252.617 li
@
223.707 327.656 mo
223.707 358.793 li
223.707 362.684 235.383 366.578 247.059 366.578 cv
258.734 366.578 270.41 362.684 270.41 358.793 cv
270.41 327.656 li
270.41 323.766 258.734 319.871 247.059 319.871 cv
235.383 319.871 223.707 323.766 223.707 327.656 cv
cp
.233585 .0486458 0 0 cmyk
f
223.707 327.656 mo
223.707 358.793 li
223.707 362.684 235.383 366.578 247.059 366.578 cv
258.734 366.578 270.41 362.684 270.41 358.793 cv
270.41 327.656 li
270.41 331.547 258.734 335.441 247.059 335.441 cv
235.383 335.441 223.707 331.547 223.707 327.656 cv
223.707 323.766 235.383 319.871 247.059 319.871 cv
258.734 319.871 270.41 323.766 270.41 327.656 cv
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B64EDF881FD1B460ED04F2A6B3E107FA4B26B5BC66EB7C459B
A3B5406A0C5B67A83F3188F8E366D009551F25512D409F1330C1CDCBEB22BA02
B2DA> |-
/d <1C60D8A8C9B7EF325730A29058FA8CFC2032FBD3C10534A88DBADFA05839
C31B8D9C5EC6AC22F27C3DA29688E79B494340CFFD8DE1C69106409617ECF281
759121CCBC1670E45D527C75D9C89CEC42BF3F32B6BF187E94A947093A072A77
9FBAB0943D1B2E38B8E97985D2B7F2CEF83B2DEDC85E87E1F1BC1574D4726B01
8397552D4E9F618D120EE7B9AA240EE18532A3C639C9B0D9384AD0FB959EE3A0
D78D44AC> |-
/aacute <1C60D8A8C9B7EF32A8307F9C9C9C152E66278C822EC877223A37191
E122319FE7D4505F223CEA06F73BE3D02EEB5CB48605EB2BC2AE02A3D9684940
6FC7E7B0D84DA16FA065699BA401DBAD67486B54CE5BA2773EF77D0222988B01
08787EC382910466A8F95ED87C6888EF1FAAB8B0D425038FC7E16698D2997EFA
44E74AD0E765829DCC95D8AD48F58D952284DAF79AD997C6570BD30E0B7BD5D9
FEDB0EA6CFE638E6E95682058DFAB3F6CFBB02DD48144289E919BF00C90AB2BD
041DEC6D7A7C1D291F2D10A9A8D8EDA8AABE1FBB627EA7A0CEBE6EAE7899C646
2BEEBCB2E5819D3B06553576431487A404A391EC5A008C5DBDD27> |-
/i <1C60D8A8C9B88C082599D5E969003D16758A5A514088FA05DB42A280802E
5DAE9245BE97CD73A447F67430C99CD0> |-
/k <1C60D8A8C9B7A73DC573E0F2723BC0E02634AD5B80077BDED4A7DDA098C8
9226284ABB4E26D47B3CB965C68E1E21064C7D930039C63B749F9AFB50FCD332
EC55E3AC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 26 /A put
dup 27 /d put
dup 28 /aacute put
dup 29 /i put
dup 30 /k put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n /b /j /l 
/eacute /s /o /g /period /h /u /r 
/odieresis /iacute /A /d /aacute /i /k 225{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
229.544 345.56 mo
(\016\022\021\013\022\017\023\005\017\005\006\024\025\026)
[1.24423 3.11617 2.80232 2.80232 3.11618 1.24422 3.11058 3.11618 1.24422 3.11618 1.55809 1.55249 
3.11615 0 ]xsh
234.915 353.033 mo
(\032\033\005\006\015\034\013\035\021)
[3.73833 3.11058 3.11618 1.55807 3.11058 3.11617 2.80232 1.24422 0 ]xsh
235.148 360.505 mo
(\012\013\007\014\007\006\007\036)
[4.04654 2.80232 3.11618 3.11618 3.11057 1.55809 3.11057 0 ]xsh
179.336 292.781 mo
179.336 297.453 li
247.059 315.203 li
247.059 319.871 li
249.859 317.07 mo
247.059 319.871 li
244.258 317.07 li
.616266 .535912 .528435 .253666 cmyk
@
223.707 150.332 mo
270.414 150.332 li
270.414 187.695 li
223.707 187.695 li
cp
.233585 .0486458 0 0 cmyk
f
223.707 150.332 mo
270.414 150.332 li
270.414 187.695 li
223.707 187.695 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/v <1C60D8A8C9B7A73DC573E0F2723BC0EE782A948F785DE6F0CF0FEE349F6B
35EA54ACD9F0C8E820686F8BB619> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 31 /v put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n /b /j /l 
/eacute /s /o /g /period /h /u /r 
/odieresis /iacute /A /d /aacute /i /k /v 
224{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
232.58 170.882 mo
(\002\005\035\017\003\001\007\027\037\007\027)
[4.66862 3.11617 1.24423 1.24423 1.55809 3.73833 3.11618 1.8663 2.80232 3.11618 0 ]xsh
233.047 199.84 mo
270.41 199.84 li
261.07 237.203 li
223.707 237.203 li
cp
.233585 .0486458 0 0 cmyk
f
233.047 199.84 mo
270.41 199.84 li
261.07 237.203 li
223.707 237.203 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/m <1C60D8A8C9B6B41CEC8259142B3A2C29B838BA6D4F240E6B68C392B19C3C
A9C0E38FF72A27A08507D204B9E5201ABC0DD229F24784E859FA133A90C8F79E
EE205A93C82CBCDBD5E9AF2F41E60422F2D8827FCBC6446879BD02C6F462F7DC
996B4D8CADE33173408A2D951A1193EA2CDC651EE4FE10FFEF0D93D4837190C9
959923A166D5C6D4AF8B7CF0E2FB6B771238> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 32 /m put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n /b /j /l 
/eacute /s /o /g /period /h /u /r 
/odieresis /iacute /A /d /aacute /i /k /v 
/m 223{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
240.053 216.653 mo
(\007 \005\035\017)
[3.11618 4.66861 3.11618 1.24423 0 ]xsh
237.717 224.593 mo
(\012\013\007\014\007\006)
[4.04655 2.80231 3.11618 3.11618 3.11617 0 ]xsh
223.707 98.488 mo
270.41 98.488 li
270.41 128.379 li
258.734 128.379 258.734 128.379 247.059 132.117 cv
235.383 135.852 235.383 135.852 223.707 132.117 cv
cp
.233585 .0486458 0 0 cmyk
f
223.707 98.488 mo
270.41 98.488 li
270.41 128.379 li
258.734 128.379 258.734 128.379 247.059 132.117 cv
235.383 135.852 235.383 135.852 223.707 132.117 cv
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
240.053 111.566 mo
(\007 \005\035\017)
[3.11618 4.66861 3.11618 1.24423 0 ]xsh
233.747 119.039 mo
(\015\007\016\007\017\007\014\006\020\021)
[3.11618 3.11057 1.24423 3.11618 1.24422 3.11618 3.11057 1.55809 3.1162 0 ]xsh
223.707 255.887 mo
270.414 255.887 li
270.414 293.25 li
223.707 293.25 li
cp
.233585 .0486458 0 0 cmyk
f
223.707 255.887 mo
270.414 255.887 li
270.414 293.25 li
223.707 293.25 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
229.544 268.963 mo
(\016\022\021\013\022\017\023\005\017\005\006\024\025\026)
[1.24423 3.11617 2.80232 2.80232 3.11618 1.24422 3.11058 3.11618 1.24422 3.11618 1.55809 1.55249 
3.11615 0 ]xsh
230.478 276.436 mo
(\007 \005\035\017\003\012\013\007\014\007\006)
[3.11618 4.66861 3.11618 1.24423 1.24423 1.55809 4.04654 2.80232 3.11617 3.11057 3.11618 0 
]xsh
235.849 284.376 mo
(\027\030\023\013\031\006\020\021\007)
[1.8663 3.11618 3.11617 2.80232 1.55249 1.55807 3.11618 2.80232 0 ]xsh
179.336 131.648 mo
179.336 149.863 li
182.137 147.062 mo
179.336 149.863 li
176.535 147.062 li
.616266 .535912 .528435 .253666 cmyk
@
179.336 187.23 mo
179.336 199.371 li
182.137 196.57 mo
179.336 199.371 li
176.535 196.57 li
@
179.336 236.738 mo
179.336 255.418 li
182.137 252.617 mo
179.336 255.418 li
176.535 252.617 li
@
247.059 132.117 mo
247.059 150.332 li
249.859 147.531 mo
247.059 150.332 li
244.258 147.531 li
@
247.059 187.695 mo
247.059 199.84 li
249.859 197.035 mo
247.059 199.84 li
244.258 197.035 li
@
247.059 293.25 mo
247.059 319.871 li
249.859 317.07 mo
247.059 319.871 li
244.258 317.07 li
@
247.059 237.203 mo
247.059 255.887 li
249.859 253.082 mo
247.059 255.887 li
244.258 253.082 li
@
400.719 116.703 mo
408.504 98.023 li
439.641 98.023 li
443.531 98.023 447.426 107.363 447.426 116.703 cv
447.426 126.043 443.531 135.387 439.641 135.387 cv
408.504 135.387 li
cp
.233585 .0486458 0 0 cmyk
f
400.719 116.703 mo
408.504 98.023 li
439.641 98.023 li
443.531 98.023 447.426 107.363 447.426 116.703 cv
447.426 126.043 443.531 135.387 439.641 135.387 cv
408.504 135.387 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B854D0FA53E24F3423138E9B0565D878B6A267A2E30A1E
E1B805> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 33 /slash put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n /b /j /l 
/eacute /s /o /g /period /h /u /r 
/odieresis /iacute /A /d /aacute /i /k /v 
/m /slash 222{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
419.167 111.099 mo
(\010\007\015)
[4.04654 3.11618 0 ]xsh
406.557 118.572 mo
(\016\022\021\013\022\017\023\005\017\005\006\024\025\026)
[1.24423 3.11618 2.80231 2.80231 3.11618 1.24423 3.11057 3.11618 1.24423 3.11618 1.55807 1.55249 
3.11618 0 ]xsh
410.293 126.045 mo
(!\015\007\016\007\017\007\014\006\007\021)
[1.55807 3.1106 3.11615 1.24423 3.11618 1.24423 3.11618 3.11057 1.55811 3.11615 0 ]xsh
400.719 431.496 mo
447.426 431.496 li
447.426 468.859 li
400.719 468.859 li
cp
.233585 .0486458 0 0 cmyk
f
400.719 431.496 mo
447.426 431.496 li
447.426 468.859 li
400.719 468.859 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/B <1C60D8A8C9B64EDF8862D7741422B35DDD963797F577F64A56D0702EE14E
7FAEF290F221461A9FFF7A974F7EE9C86AACD206452C260DE85DB819BEC5FCB1
9DB78F038063842DE023519A627F54E1F12B9BE3EFED9D24301AFA8A5894CEA7
FC6B189962B9421D892E36E1A925C4C6EC032846CA870A5240CC8086CC40D4BB
CC0798C4CE8B0412357450BB88276CCBAFDA8D0CA4152527E7A92F93052B0825
EB6803C98CA5FE9FDC1614D364CA3A56456E0321BF3A7E3169AF2F686100770D
40CD1614439E82> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 34 /B put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n /b /j /l 
/eacute /s /o /g /period /h /u /r 
/odieresis /iacute /A /d /aacute /i /k /v 
/m /slash /B 221{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
406.557 444.575 mo
(\016\022\021\013\022\017\023\005\017\005\006\024\025\026)
[1.24423 3.11618 2.80231 2.80231 3.11618 1.24423 3.11057 3.11618 1.24423 3.11618 1.55807 1.55249 
3.11618 0 ]xsh
410.994 452.048 mo
("\007\016\007\017\007\014\006\020\021)
[3.73834 3.11057 1.24982 3.1106 1.24423 3.11615 3.11618 1.55249 3.11618 0 ]xsh
412.862 459.521 mo
(\027\030\023\013\031\006\020\021\007)
[1.8663 3.11618 3.11618 2.80231 1.55249 1.55807 3.11618 2.80231 0 ]xsh
424.07 135.387 mo
424.07 431.496 li
426.875 428.695 mo
424.07 431.496 li
421.27 428.695 li
.616266 .535912 .528435 .253666 cmyk
@
223.707 379.656 mo
270.414 379.656 li
270.414 417.019 li
223.707 417.019 li
223.707 379.656 li
.233585 .0486458 0 0 cmyk
f
223.707 379.656 mo
223.707 379.189 li
270.414 379.189 li
270.537 379.189 270.657 379.239 270.744 379.326 cv
270.831 379.413 270.881 379.533 270.881 379.656 cv
270.881 417.019 li
270.881 417.142 270.831 417.262 270.744 417.349 cv
270.657 417.436 270.537 417.486 270.414 417.486 cv
223.707 417.486 li
223.584 417.486 223.464 417.436 223.377 417.349 cv
223.29 417.262 223.24 417.142 223.24 417.019 cv
223.24 379.656 li
223.24 379.533 223.29 379.413 223.377 379.326 cv
223.464 379.239 223.584 379.189 223.707 379.189 cv
223.707 379.656 li
224.174 379.656 li
224.174 416.552 li
269.947 416.552 li
269.947 380.123 li
223.707 380.123 li
223.707 379.656 li
224.174 379.656 li
223.707 379.656 li
.616266 .535912 .528435 .253666 cmyk
f
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/H <1C60D8A8C9B6079F3517E07A29D82E7F5C6698017B00A393EC255E42F610
C488BEA790453278CA03340EAD4193E28CE5DF2139082341F6AD6A04C8A43DF0> |-
/oacute <1C60D8A8C9B7EF32A839C1F22A8D6B7B5648FF3B5A2DFE7AC1FBFEC
3D2B9B25D250F8B7B414C07986C958031E2F34E5B439DB5D5D69BF6F7C8C39F1
D35415A07CF34D042F45A3D3498F2B5FA9B81EF3F40CE8FF1D6166C9859F3C30
0C387C387C2509DAC1D2F828C2C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 35 /H put
dup 36 /oacute put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n /b /j /l 
/eacute /s /o /g /period /h /u /r 
/odieresis /iacute /A /d /aacute /i /k /v 
/m /slash /B /H /oacute 219{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
236.316 388.529 mo
(#\005\021\022\014\017$)
[4.04655 3.11617 2.80232 3.11618 3.11617 1.24423 0 ]xsh
227.442 396.469 mo
(\012\013\007\014\007\006\003\020\021!\037\005\023\011)
[4.04654 2.80232 3.11618 3.11618 3.11057 1.55809 1.55809 3.11057 2.80232 1.55807 2.80234 3.11615 
3.1106 0 ]xsh
230.244 404.408 mo
("\007\016\007\017\007\014\006\020\021\007\036)
[3.73833 3.11058 1.24983 3.11057 1.24423 3.11618 3.11618 1.55247 3.11618 2.80232 3.11618 0 
]xsh
235.382 411.881 mo
(\036\007\027\007\021\020\021\007)
[2.80232 3.11617 1.8663 3.11618 2.80232 3.11617 2.80232 0 ]xsh
247.059 366.578 mo
247.059 379.656 li
249.859 376.852 mo
247.059 379.656 li
244.258 376.852 li
.616266 .535912 .528435 .253666 cmyk
@
284.422 526.621 mo
284.422 557.758 li
284.422 561.648 296.098 565.543 307.773 565.543 cv
319.453 565.543 331.129 561.648 331.129 557.758 cv
331.129 526.621 li
331.129 522.73 319.453 518.836 307.773 518.836 cv
296.098 518.836 284.422 522.73 284.422 526.621 cv
cp
.233585 .0486458 0 0 cmyk
f
284.422 526.621 mo
284.422 557.758 li
284.422 561.648 296.098 565.543 307.773 565.543 cv
319.453 565.543 331.129 561.648 331.129 557.758 cv
331.129 526.621 li
331.129 530.512 319.453 534.406 307.773 534.406 cv
296.098 534.406 284.422 530.512 284.422 526.621 cv
284.422 522.73 296.098 518.836 307.773 518.836 cv
319.453 518.836 331.129 522.73 331.129 526.621 cv
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
290.261 544.524 mo
(\016\022\021\013\022\017\023\005\017\005\006\024\025\026)
[1.24423 3.11618 2.80231 2.80231 3.11618 1.24423 3.11057 3.11618 1.24423 3.11618 1.55807 1.55249 
3.11618 0 ]xsh
295.632 551.997 mo
(\032\033\005\006\015\034\013\035\021)
[3.73834 3.11057 3.11618 1.55807 3.11057 3.11618 2.80234 1.2442 0 ]xsh
291.428 559.47 mo
("\007\016\007\017\007\014\006\020\021\007\036)
[3.73834 3.11057 1.24982 3.1106 1.24423 3.11615 3.11618 1.55249 3.11618 2.80231 3.11618 0 
]xsh
223.707 431.496 mo
270.414 431.496 li
270.414 468.859 li
223.707 468.859 li
cp
.233585 .0486458 0 0 cmyk
f
223.707 431.496 mo
270.414 431.496 li
270.414 468.859 li
223.707 468.859 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD5E1FDF2BC0C60FD3
111145A0C6CE3E2B7407A7378D5CEC81742B166F74521F0055BFBBBC2731E70B
FB8F1E64CE6DC937ED1C7E392B> |-
/p <1C60D8A8C9B7EF32A838F0ADA05AA786C990062AB3976FCA46285A6C95C3
55A5E35AB5B99635A334C1720879C264484F41DED1BCAA7ADBB65160D2B2BB70
980044408EAFD32B3CD78DD030D120B27D24CA99052727BD71A04FC8A5A94BCD
416002A9FC9911570384E9826378444BDD694D94AF79F0D088405BBAAFA131A3
9CDF> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/ohungarumlaut <1C60D8A8C9B7EF32A839C1F22A8D6B7B5648FF3B5A2DFE7A
C1FBFEC3D2B9B25D250F8B7B414C07986C958031E2F34E5B439DB5D5D69BF6F7
C8C39F1D35415A07CF34D042F45A3D3498F2B5FA9B81EF3F40CE8FF1D6166C98
9460DD7570800D656ACAE7197800D29129AA6248E91A3541C9729520CBE246> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 37 /D put
dup 38 /p put
dup 39 /c put
dup 40 /ohungarumlaut put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n /b /j /l 
/eacute /s /o /g /period /h /u /r 
/odieresis /iacute /A /d /aacute /i /k /v 
/m /slash /B /H /oacute /D /p /c 
/ohungarumlaut 215{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
232.813 440.839 mo
(%\035\021\013&\020'\021\007\027)
[4.04654 1.24423 2.80232 2.80232 3.11617 3.11618 2.80232 2.80231 3.11618 0 ]xsh
232.58 448.311 mo
("\007\016\007\017\007\014\006\020\021\006)
[3.73833 3.11058 1.24983 3.11057 1.24423 3.11618 3.11617 1.55249 3.11618 2.80231 0 ]xsh
236.083 455.784 mo
(\036\020\021\013\031\006\003\005\013)
[2.80232 3.11617 2.80232 2.80232 1.55247 1.55809 1.55809 3.11618 0 ]xsh
233.981 463.724 mo
(\012\013\007\014\007\006\015\(\017)
[4.04654 2.80232 3.11618 3.11618 3.11057 1.55809 3.11057 3.11618 0 ]xsh
247.059 417.02 mo
247.059 431.496 li
249.859 428.695 mo
247.059 431.496 li
244.258 428.695 li
.616266 .535912 .528435 .253666 cmyk
@
247.059 468.863 mo
247.059 473.531 li
307.773 514.164 li
307.773 518.836 li
310.578 516.035 mo
307.773 518.836 li
304.973 516.035 li
@
284.422 582.824 mo
331.129 582.824 li
331.129 620.187 li
284.422 620.187 li
284.422 582.824 li
.233585 .0486458 0 0 cmyk
f
284.422 582.824 mo
284.422 582.357 li
331.129 582.357 li
331.252 582.357 331.372 582.407 331.459 582.494 cv
331.546 582.581 331.596 582.701 331.596 582.824 cv
331.596 620.187 li
331.596 620.31 331.546 620.43 331.459 620.517 cv
331.372 620.604 331.252 620.654 331.129 620.654 cv
284.422 620.654 li
284.299 620.654 284.179 620.604 284.092 620.517 cv
284.005 620.43 283.955 620.31 283.955 620.187 cv
283.955 582.824 li
283.955 582.701 284.005 582.581 284.092 582.494 cv
284.179 582.407 284.299 582.357 284.422 582.357 cv
284.422 582.824 li
284.889 582.824 li
284.889 619.72 li
330.662 619.72 li
330.662 583.291 li
284.422 583.291 li
284.422 582.824 li
284.889 582.824 li
284.422 582.824 li
.616266 .535912 .528435 .253666 cmyk
f
.750271 .679713 .654902 .901945 cmyk
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
297.033 591.697 mo
(#\005\021\022\014\017$)
[4.04654 3.11618 2.80231 3.11618 3.11618 1.24423 0 ]xsh
288.159 599.637 mo
(\012\013\007\014\007\006\003\020\021!\037\005\023\011)
[4.04654 2.80234 3.11615 3.11618 3.11057 1.55811 1.55807 3.11057 2.80234 1.55807 2.80234 3.11618 
3.11057 0 ]xsh
290.961 607.577 mo
("\007\016\007\017\007\014\006\020\021\007\036)
[3.73834 3.11057 1.24982 3.1106 1.24423 3.11615 3.11618 1.55249 3.11618 2.80231 3.11618 0 
]xsh
296.099 615.049 mo
(\036\007\027\007\021\020\021\007)
[2.80231 3.11618 1.8663 3.11618 2.80231 3.11618 2.80231 0 ]xsh
174.199 379.188 mo
211.562 379.188 li
214.141 379.188 216.234 381.281 216.234 383.859 cv
216.234 411.883 li
216.234 414.461 214.141 416.551 211.562 416.551 cv
174.199 416.551 li
171.621 416.551 169.527 414.461 169.527 411.883 cv
169.527 383.859 li
169.527 381.281 171.621 379.188 174.199 379.188 cv
cp
.233585 .0486458 0 0 cmyk
f
174.199 379.188 mo
211.562 379.188 li
214.141 379.188 216.234 381.281 216.234 383.859 cv
216.234 411.883 li
216.234 414.461 214.141 416.551 211.562 416.551 cv
174.199 416.551 li
171.621 416.551 169.527 414.461 169.527 411.883 cv
169.527 383.859 li
169.527 381.281 171.621 379.188 174.199 379.188 cv
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
178.635 392.265 mo
(%\035\021\013&\020'\021\007\027)
[4.04655 1.24422 2.80232 2.80232 3.11617 3.11618 2.80232 2.80231 3.11618 0 ]xsh
185.874 399.738 mo
(\007 \005\035\017)
[3.11618 4.66861 3.11618 1.24423 0 ]xsh
174.432 407.211 mo
(&\022\014\006\022\021\031\006\034\021\006\003\036\020\027)
[3.11618 3.11057 3.11618 1.55809 3.11057 2.80232 1.55807 1.55809 3.11058 2.80231 1.55809 1.55809 
2.80232 3.11617 0 ]xsh
117.219 379.188 mo
154.582 379.188 li
157.16 379.188 159.254 381.281 159.254 383.859 cv
159.254 411.883 li
159.254 414.461 157.16 416.551 154.582 416.551 cv
117.219 416.551 li
114.641 416.551 112.547 414.461 112.547 411.883 cv
112.547 383.859 li
112.547 381.281 114.641 379.188 117.219 379.188 cv
cp
.233585 .0486458 0 0 cmyk
f
117.219 379.188 mo
154.582 379.188 li
157.16 379.188 159.254 381.281 159.254 383.859 cv
159.254 411.883 li
159.254 414.461 157.16 416.551 154.582 416.551 cv
117.219 416.551 li
114.641 416.551 112.547 414.461 112.547 411.883 cv
112.547 383.859 li
112.547 381.281 114.641 379.188 117.219 379.188 cv
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
121.655 392.265 mo
(%\035\021\013&\020'\021\007\027)
[4.04655 1.24423 2.80232 2.80231 3.11618 3.11618 2.80231 2.80232 3.11618 0 ]xsh
129.828 399.738 mo
(\001\002\001)
[3.73833 4.66862 0 ]xsh
117.451 407.211 mo
(&\022\014\006\022\021\031\006\034\021\006\003\036\020\027)
[3.11617 3.11057 3.11617 1.55809 3.11057 2.80232 1.55809 1.55809 3.11057 2.80232 1.55809 1.55809 
2.80231 3.11618 0 ]xsh
247.059 366.578 mo
247.059 371.246 li
192.879 374.516 li
192.879 379.188 li
195.684 376.387 mo
192.879 379.188 li
190.078 376.387 li
.616266 .535912 .528435 .253666 cmyk
@
247.059 366.578 mo
247.059 371.246 li
135.898 374.516 li
135.898 379.188 li
138.703 376.387 mo
135.898 379.188 li
133.098 376.387 li
@
457.699 116.703 mo
465.484 98.023 li
496.621 98.023 li
500.512 98.023 504.406 107.363 504.406 116.703 cv
504.406 126.043 500.512 135.387 496.621 135.387 cv
465.484 135.387 li
cp
.233585 .0486458 0 0 cmyk
f
457.699 116.703 mo
465.484 98.023 li
496.621 98.023 li
500.512 98.023 504.406 107.363 504.406 116.703 cv
504.406 126.043 500.512 135.387 496.621 135.387 cv
465.484 135.387 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/f <1C60D8A8C9B854D088BD32B2A01302EB34FFE9B7DE3E669E323324E0C3C1
972D68014E39839A20750E789E8E75FA16871E399D68E698F38ACA299AA675F4
1E85614BC2D8076EB3722DE26AF33A6DAE3B78> |-
/udieresis <1C60D8A8C9B7EF32A8358723D0E0769DF18EF85AA750FB259C46
BC2EB8E2DA0FEF4BC23734A2380E7ACA13FB34B1C8A21D9378DEC76900F3FBA9
00722D7650DD9A463C12AD5AB681BFAAF75EDD90E5790E9987C3E76A926C1D95
39B1FE58B9F629157F0B6CA9D962516663B879A02DACB23AD3685C957DBF346B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 41 /f put
dup 42 /udieresis put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n /b /j /l 
/eacute /s /o /g /period /h /u /r 
/odieresis /iacute /A /d /aacute /i /k /v 
/m /slash /B /H /oacute /D /p /c 
/ohungarumlaut /f /udieresis 213{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
463.771 103.626 mo
(%\035\021\013&\020'\021\007\027\003\005\003)
[4.04654 1.24423 2.80231 2.80234 3.11618 3.11615 2.80234 2.80231 3.11618 1.8663 1.55807 3.11618 
0 ]xsh
463.07 111.099 mo
(\016\022\021\013\022\017\023\005\017\005\006\024\025\026)
[1.24423 3.11618 2.80231 2.80231 3.11618 1.24423 3.11057 3.11618 1.24423 3.11618 1.55807 1.55249 
3.11618 0 ]xsh
466.34 118.572 mo
(!\033\035\021\013&\007'\021\007\027)
[1.55807 3.1106 1.24982 2.80234 2.80231 3.11057 3.11618 2.80231 2.80234 3.11615 0 ]xsh
461.669 126.045 mo
(\)\007\017*\017\007\006\007\014\003\025\031\037\034\021\006)
[1.55807 3.1106 1.24982 3.11057 1.24423 3.11618 1.55811 3.11057 3.11618 1.55807 3.11057 1.55811 
2.80231 3.11618 2.80231 0 ]xsh
473.813 133.518 mo
(\)\022\023\005\033)
[1.55807 3.1106 3.11615 3.11618 0 ]xsh
457.699 431.496 mo
504.406 431.496 li
504.406 468.859 li
457.699 468.859 li
cp
.233585 .0486458 0 0 cmyk
f
457.699 431.496 mo
504.406 431.496 li
504.406 468.859 li
457.699 468.859 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
463.537 437.102 mo
(\016\022\021\013\022\017\023\005\017\005\006\024\025\026)
[1.24423 3.11618 2.80231 2.80231 3.11618 1.24423 3.11057 3.11618 1.24423 3.11618 1.55807 1.55249 
3.11618 0 ]xsh
467.274 444.575 mo
(%\035\021\013&\020'\021\007\027)
[4.04654 1.24423 2.80234 2.80231 3.11618 3.11618 2.80231 2.80231 3.11618 0 ]xsh
470.543 452.048 mo
(\)\007\017*\017\007\006\007\014)
[1.55807 3.1106 1.24982 3.11057 1.24423 3.11618 1.55811 3.11057 0 ]xsh
467.04 459.521 mo
("\007\016\007\017\007\014\006\020\021\006)
[3.73834 3.11057 1.24982 3.1106 1.24423 3.11615 3.11618 1.55249 3.11618 2.80231 0 ]xsh
474.28 466.994 mo
(\027\030\023\013\031\006)
[1.8663 3.11618 3.11618 2.80231 1.55807 0 ]xsh
481.051 135.387 mo
481.051 431.496 li
483.855 428.695 mo
481.051 431.496 li
478.25 428.695 li
.616266 .535912 .528435 .253666 cmyk
@
481.051 468.863 mo
481.051 473.531 li
307.773 514.164 li
307.773 518.836 li
310.578 516.035 mo
307.773 518.836 li
304.973 516.035 li
@
120.254 431.73 mo
122.121 431.73 li
223.938 417.254 li
131.93 431.73 li
206.191 431.73 li
208.684 431.73 209.926 432.977 209.926 435.469 cv
209.926 465.359 li
209.926 467.852 208.684 469.094 206.191 469.094 cv
120.254 469.094 li
117.762 469.094 116.516 467.852 116.516 465.359 cv
116.516 435.469 li
116.516 432.977 117.762 431.73 120.254 431.73 cv
.765896 .419379 0 0 cmyk
f
0 lj
120.254 431.73 mo
122.121 431.73 li
223.938 417.254 li
131.93 431.73 li
206.191 431.73 li
208.684 431.73 209.926 432.977 209.926 435.469 cv
209.926 465.359 li
209.926 467.852 208.684 469.094 206.191 469.094 cv
120.254 469.094 li
117.762 469.094 116.516 467.852 116.516 465.359 cv
116.516 435.469 li
116.516 432.977 117.762 431.73 120.254 431.73 cv
1 .914611 .19852 .199313 cmyk
@
gsave
120.02 436.48 mo
205.958 436.48 li
205.958 464.503 li
120.02 464.503 li
120.02 436.48 li
clp
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NJBAAA+LiberationSans Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NJBAAA+LiberationSans def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /g3 put
dup 4 /g4 put
dup 5 /g5 put
dup 6 /g6 put
dup 7 /g7 put
dup 8 /g8 put
dup 9 /g9 put
dup 10 /g10 put
dup 29 /g29 put
dup 30 /g30 put
dup 31 /g31 put
dup 32 /g32 put
dup 33 /g33 put
dup 34 /g34 put
dup 35 /g35 put
dup 36 /g36 put
dup 37 /g37 put
dup 38 /g38 put
dup 39 /g39 put
dup 40 /g40 put
dup 41 /g41 put
dup 42 /g42 put
dup 43 /g43 put
dup 44 /g44 put
dup 45 /g45 put
dup 46 /g46 put
dup 47 /g47 put
dup 48 /g48 put
dup 49 /g49 put
def
/FontBBox {-203 -303 1050 910} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
30 dict dup begin
/.notdef <1C60D8A8C9B72E922B867FB63D2E8287E8967217F388CA847E158D
39F13AB4A7BCA39DF2> |-
/g3 <1C60D8A8C9B7EF3224FCA76D01E86530A5708434E44C61689C25BC6759E
5B4ACFBE118703805EE1A6DC5F8A762784EDD17D6B749C3A05BE127E5D675924
AD8B5DF98BEFBE13B72DDDF70ACF7249E9BE53BE195C9959B47A79333CD4FAB7
57626FD9CA4323AD9F1A3DEE18B2115948CAF05550DA15BC245EC358538935DA
8EAC6CAA6843A157952193958F6827FF426BABB2DA6D4BD3AC6F9A12252D3CF5
39F8B1511174C54E6AFB899163E565C0EEBFDB06D3651FDEE69316DA463A7CFD
77FCE2867BAA98AFF80F9E02836C9AF05D05E6CCCEF524702D039B3936000232
0A36D1C24E754989E9372D3FBDB0735B6F8F39B1CC7C7D5A5F6CC824F8F3D875
A7FCEC5474DE4DA1F4C40E99FFA0210E39D053C4CA4B110D133005ECF4E868E0
911626C1A35731480F8F8625F86D0B0126DDB27E678892B2C43E657885D19EBE
930171A147C3825B3656B> |-
/g4 <1C60D8A8C9B7EF3224F8DD91AEF7DD3D6A951965CA0E38FC4E654E06946
97B9F615D6A1F364EBF3F54614208E6E32A0FBBF552D3D0A426280522AACBDDF
F1BE59B147F4ECB4E6CE88D82B6EBF439D59CBB47A7DAA70A5B988FFCAAC80CD
213BB82E06CACB2EE094D172AD1A01CBC6460431FEC55897CD976885D74EAEAD
2DDAC40476FDDF2A44E067B56425F6CAB98D95A41D1C94F69D93E6A1B1C9A05C
1A5453268EE20412445C8FE92A7FDCA7359287D5DC980CE4E28D9E293D2B0391
3A3458644EC9CE735A7C0B338DC426885E61250> |-
/g5 <1C60D8A8C9B81F2C3A8AC3EFF2CD5B6CFBF08BF1DC487B0368F1D3703A2
7DDEAB4B08CFFFD603A8F5FA8E691953097962DB0B62997B96402FF31D8FA334
22B96C07A214BCE39EE2F0AB72A3F1D8E91F3C673CC2192C0CD403ABF8DF64A5
BD302F680BD67CD64F5F094BC4B6D0A7B8D2E6A264012837BA74CA959642834F
FD6E6632014098FEADB1E4412C0F349F64FE7C42A6D672D9344D8A9382E960AC
51405B23010A876> |-
/g6 <1C60D8A8C9B854D0F4910D935A1D57176F9CDF391D85F50858D0A5E07F8
2EA02CE5587459A5B9D425DF3168D91D0D7A44A8B4F743D0C7C8B58D8A42E331
DBEED4AA790D46EA67BA4E06234718C7316B1F49EB30E4AC4FC22> |-
/g7 <1C60D8A8C9B7EF3224E4F3B8A15DF6A93A4D47A6619BF4961B721774779
AC89965E6D669F44F41E7556FE857896307876BC9161808A88AAC70F74B05B3A
C3A137EFDA3A0AFB15CFC7134B5D3541716E6CFB266DFBED5F9C150903A3DEBC
40B7F5CD277C2AFC977CF67865CEB0F9257951ECCFDA898C6D4833CFE176E2D0
0A79888DC7FE3809F414165C1B074ADC4F78CB1825D0641D221EAFB3EE680699
F3B907EAD582D0F142560C9818AFC2FD66D8C9D72708B25F4A6E34A715878F24
666404FC31CDCCD60713A3513CBE987D1> |-
/g8 <1C60D8A8C9B7EF322457B2A97C000C54A882730A7342197B35CAA9AB2CB
F535313A8325FADD7F2CF33CDC58E00A8867272EC2A92330E05891F691105F9E
3E0C4A0C9150482F8C28C349EA1DB47110B0B0C501780D1757A83199CDACA856
6103FC0ECFA0CD01A29ACD220764F601C1C01419EE6B4207DBCA4FE7BD881DAB
2CA561C4F7B5857CDB738766ABA6FDA08F63D6756B7C1DD8B59DB5848E7FF39C
1D8CFD3B7B8D6091C28260C33D99ED99CF9764FB156C0374921D48B8895392B3
78508EDBEC0C164D89C9E87CE00A4BE338FB9C86FA4FA776DF18FFC2D1E3ED78
98ED274F66E3008DE50E5F6AC2D947E6A6CBDE73D9CEBAA39E80391DFEDA623B
54184EEEAA8A4D651DF623330849D47A8E783EAE2B8E944> |-
/g9 <1C60D8A8C9B854D00D> |-
/g10 <1C60D8A8C9B7EF322BB5DE869312FFA73F92F966C0EB2AD304C3E33283
329F032FBFC7CE76CD0C23E579DEE2BD02A11C6E167AE60BF43320297F1D31EF
39793018F9CC52F7319F0AE5C94EF5FDF26DEF253ABDA26D3AE5FCD6019ABEC1
586705E83FD01201A7718AE88C51232F5F687279178D808B2EC679F97580DA50
6E1FF5F7954C9DE86135996EFFE6DAF9DA956C8DA49E311AD94F83016D2BFA6E
700153B25A3E4B3A4FDB88C8FB32F49D19E02BFCCF8474E2CA16DAEFB6E2FA68
95D898F17B67FE36069DDF0ECF53C366FD812D7305E54419530DEDD3E675EB12
9820362BE5A2B520B857D37171DE0BBE012CE40B098E0A39FA8E30D15F6397DB
B551CBBBA55248B22CD79D78FE153F709E56BCB85EDD137CDFC47ED15C3CCFCD
DB9417595F555F8F4EA408B8ED5FDC5991119B0DF850F5BE9F7559287552D987
AE92261F9E9DBD63A12BBE5F5A524B606DD636132975F771A2173EF189277E> |-
/g29 <1C60D8A8C9B6079F6CAF89E6F9B0B24F5085277BE0AF35B692F0069FE3
477A0F29D6ED1E7BE81B4FDE5523> |-
/g30 <1C60D8A8C9B7A73DB6DE0B8B63B1D624E5971A614F5E3DF37808BE1BBB
139479910854739834D93C> |-
/g31 <1C60D8A8C9B7EF32240F521198E08C2ACB923717A133880155C0669BAB
C0A43B2AFF6672BCC8D4FF8A008379CF23637E98FF0FA5DC5FE274B9C44D5801
C90294B0532FBEA77009012B29826D61C01021AE0A2123898C33F4A57A4898BC
A75C5ACAECD1A6F3826A4746E876325BC485E899ED9507D58C43408F00F5FE4C
3C3FF1BFAF6235FF6933775BA8E5721610F1D54EBF0F58F748EAC9DDB5D214F4
4F734D919CD9459246FE35F93FF78C4A2139F6926753972BDCDED43849B098A6
1E71776537253AD0EFAF> |-
/g32 <1C60D8A8C9B6B41CB4AE1A95334E14EC1E3C3761143318C2ED57C6709C
10AAD4FED557E46FFB7B9AA7E95DED38B7D3179B907DC57EAB775E9982CB61A3
854E4761D2EF44E076A20A01C06AC935E244052EBCDC9D8F88E63447DED3C3CF
DB98F45B2D7615E62CF30F05E2F82163716E56D195D9A1776D3B5DFFC8AFDC74
2E32457B6A23A3E4E158A97C21DF245A0B9C570ADF7F647FD964AD8357BA87A7
08F5AC754E14F81D471F8493B0DB65BD362CFDB58409935A17BA1C71E2DE4B11
EF7C8F28D5D8BA6E86627327A70016E93F0B7697B34FB4C4C3662EE796EB9D7D
4767EFC17D7C48A2C9F0219674596E9882E90178C36E0187975BAF64BE6B48FA
975CA0A0CFE04D412A5F3E3B5A9B5D958933FB2AA068A9A3BD2B8E69EAB01CBB
59BD30A10510D98E7B67DCE14FEDB0B31330F61EDF10> |-
/g33 <1C60D8A8C9B7A73DB6E17FC5C328C598A04F26274F91061C7983431EFE
E391C35200F7557CA40224CDB923226D5CF5070B304C40FBABBBAD830D24130A
3F0C778DB7F7324E2691B5149AD55806AF8E5B3B9585351EF071776A32DFAEA4
09E613B2F50AC75FA161A15EFF84120DA0898630E2214D3442DF380D2C1E4416
BBEEBE5D857D1727CC2262A84D36C6FF4D599E5596B59F9B425B6681DE5AB8EF
5B1606BF3328B21CFBAF66590AA8698179F3718E28CA4AC6D3AF33E5647FE6B7
51A09B2BE0B996F4D9791AF592106778D045CB642207EFACE4CB6A944F6DFCEE
A8BA0335298ADAFF968765CB98D5693851E0E2F0D3D678ADD6D906123CAF7A51
4DC99785C43C901B859067339C26E5F07FBF877C2F015DCBC4C12AFC74D4B00E
F95E47A40DB66094228204C519FCE2137C9942124E3B8A75F481B4FFA87A> |-
/g34 <1C60D8A8C9B7EF32134355B33AFF17B8C73990380578B14829C04816DC
78EEED60B708957258E0B2281786051423386E2BA8258C6424A54751897D3FB0
6E1205C0595D3573BC0ADD0457511F4128E4056280E160DCAD0E3235FD45CE77
76F79AF8FF3D872F23AF91820322B59A25D19BE2EC3878F5CA6E84B3B35B1B6C
9E7A05622D991DD010A0E3C6F5396F9EC48D51E04137046B9AD4427F61B09F0B
D742F4BB029E0DDBC5F35B66DCB4BC81E8E0D12A32F0BCBE9BA62489D8CA9D06
73F6EF982CB7C1BF1F780F4030B83B1122C42D0821FBBFF91938C8839E0F406F> |-
/g35 <1C60D8A8C9B7A73DB6332C479F6DDADB11F048780048C85A053C25CF18
93D9B0B150F132ED3B3822814D62259F3D85EC4AF49A> |-
/g36 <1C60D8A8C9B88C0872290F0883B9567556744AB94A6FEE54D838BEF83E
4E5612FB9E> |-
/g37 <1C60D8A8C9B854D0EB073C2DC676DF55181A9A4090694B789898E1FC42
B73D3705A613EB89509C2FC69D6F8729358661D0F5A709B2FEF38B607C2B3C93
A0EA> |-
/g38 <1C60D8A8C9B7EF3224F8DD91AEF7DD3D6A951965CA0E38FC4E654E0694
697B9F615D6A1F364EBF3F54614208E6E32A0FBBF552D3D0A426280522AACBDD
FF1BE59B147F4ECB4E6CE88D82B6EBF439D59CBB47A7DAA70A5B988FFCAAC80C
D213BB82E06CACB2EE094D172AD1A01CBC6460431FEC55897CD976885D74EAEA
D2DDAC40476FDDF2A44E067B56425F6CAB98D95A41D1C94F69D93E6A1B1C9A05
C1A5453268EE20412445C8FE92A7FDCA7359287D5DC980CE4E28D9E293D2B039
13A3458644EC9CE735A7C0B338DC426885E612D1855060C797F7554EAC2B7D34
2FE65ADF45A90D3423> |-
/g39 <1C60D8A8C9B7EF3224174F25B60169672CEDF5C672AE16BF5482E834FC
4DC1D6C0B29C7F286C71B816D4475779CB45DB905201EF82D6160B88D5E69306
E24C5BAA5BBD215661150567A26DB4D6C1D1E6EFF6C22054286DB10755E0C771
F70FED30FD4B6D52170B761E0BDDA2C954777EF5ADE4639849BA3306B5C0274F
C8C4480893F365F4D6FC5D8DA628AFB35E73E5F1861DE5CF4DED62FA0DC2B848
5913AA23EC4B7BA6D9C1674066FF6707B8B45272BEB6208BBB8574DB51F30D6D
9D5F678B662A08E948CD1157E586715793C9BD6679B3F133BC20CE7484A9BA81
C18948EFA66E743E284CB2A5AEC7A7D16FFCCE673F105C01C041D25DB3406B81
9DA0DB72D2BDDEEADBFA75322B6F03F5C6057F> |-
/g40 <1C60D8A8C9B88C087229E05D595A75AB813E675244> |-
/g41 <1C60D8A8C9B854D0F4987AC09C882B70B3EB33FED71359BD81E93B3EA1
A085BF8E0714953577BCDA7B8C20C394115CF0FB88FEA99439956BE2C6E01CD8
4BD5DA5BE6D96397B8FD130AAC25EC124DE8FBC7BB27907EBB8D0F5A078083C9
668CE240102D051C994AC8F8529529D69DCB214EF997955BF813D9DC5522> |-
/g42 <1C60D8A8C9B7EF3224364D481460F34141B324443E884E51E9A5C03C65
70B0CBF90AED7B96D6572D16883A2CB5141ED3D8C3955D303A6107EA55682345
655598D418046A2084E2FB98A10312692A03C4190654D6FB7C01D0FB31C18D58
620D193C4444090F03600BCD6010E85EEE1C8B2ADC03D2666C4F4416F18176E2
E917F6688E36C6C8C869FDDAB75ADA228E8957B7A0869DB3C6F1E97F70522554
3B3623299CB665BE62B79D37D879D33BD7EF5A3B04DF00670E4CE5196F83DA54
6AB1157B37A0749265BA83CB346DE6C1C01B16FA12EC82F04990C891DBB3C63D
4AAA3256524C0533CD1841DC750F7F04F582A9D9771E948A101929D8B768D494
BC04C865EC73A57F2DC950D62BCB200932D4ACA2AE5125DF5FAE87E14F51673A
8EB7B74676A8A29BEC426BA79A02211C780289EE101AE4164DE1A049E76A04C6
CEF5481D7D887B5968F72A964DEB4353D28E18D993057CD94481D7458B091F0A
5368F5DFFDE08865BC76C01EB4C3923F73749E456848855A9CD47A57A36ABF35
C931D6> |-
/g43 <1C60D8A8C9B854D0F478A2600E72E435B0E3A728BFA0E148E9451A654C
1276ACB3319DC84E5DC37078> |-
/g44 <1C60D8A8C9B7A73DB63F1FDA6600A663079DD5EAD0FDA181C4868FC701
B675ABF0C4F564F5BB143985C38B980590C4D25FE86817797B2B0333972DE2DC
EF3F76BA413F13E730554D0BF243AE4D2C1F765A9D242959DFC2137A50FD3D> |-
/g45 <1C60D8A8C9B7EF3224E4F3B8A15DF6A93A4D47A6619BF4961B72177477
9AC89965E6D669F44F41E7556FE857896307876BC9161808A88AAC70F74B05B3
AC3A137EFDA3A0AFB15CFC7134B5D3541716E6CFB266DFBED5F9C150903A3DEB
C40B7F5CD277C2AFC977CF67865CEB0F9257951ECCFDA898C6D4833CFE176E2D
00A79888DC7FE3809F414165C1B074ADC4F78CB1825D0641D221EAFB3EE68069
9F3B907EAD582D0F142560C9818AFC2FD66D8C9D72708B25F4A6E34A715878F2
4666404FC31CDCCD60713A3513CBE98724149829BBEE5A28BFE5FC24343F1609
F52FA72B92A7> |-
/g46 <1C60D8A8C9B7EF3210A837BE05680180788B5DC1C0769F02B38C9A8455
E7CA16AA9CF64EE523CD337FBB2D8CE52D980E4EA66C18CAA9867CE17EBE58A6
28113E38F11688583305D476A6B599D7304A93DA1501BB21090AFAF786985C92
67D6344D0C4F07ACCAEB06666AC2A9382EFF8B1A368F36ED7C73877EF3E90450
D6B69BBA241028F3071F3A905B506C02D4042C211AD41F20EC1A15A3A96EFCA6
5ACC08FBC9FE190525D8F9FA81320BFF185CA71912735B4E847F1CA83B6D5C50
BB5DAC9C7F8D41220BE20D> |-
/g47 <1C60D8A8C9B7EF322BB5DE869312FFA73F92F966C0EB2AD304C3E33283
329F032FBFC7CE76CD0C23E579DEE2BD02A11C6E167AE60BF43320297F1D31EF
39793018F9CC52F7319F0AE5C94EF5FDF26DEF253ABDA26D3AE5FCD6019ABEC1
586705E83FD01201A7718AE88C51232F5F687279178D808B2EC679F97580DA50
6E1FF5F7954C9DE86135996EFFE6DAF9DA956C8DA49E311AD94F83016D2BFA6E
700153B25A3E4B3A4FDB88C8FB32F49D19E02BFCCF8474E2CA16DAEFB6E2FA68
95D898F17B67FE36069DDF0ECF53C366FD812D7305E54419530DEDD3E675EB12
9820362BE5A2B520B857D37171DE0BBE012CE40B098E0A39FA8E30D15F6397DB
B551CBBBA55248B22CD79D78FE153F709E56BCB85EDD137CDFC47ED15C3CCFCD
DB9417595F555F8F4EA408B8ED5FDC5991119B0DF850F5BE9F7559287552D987
AE92261F9E9DBD63A12BBE5F5A524B606DD636132975F771A2173EF18927979F
CDD87C4649C3B0F0915C96E07585EBDA70B79E> |-
/g48 <1C60D8A8C9B7A73DB904D469146C8AF4667E8CDE65653932C72ADFDEA6
7232D389885B0445BC22837AB23B9F940E6BE17AF4949FC8F5F9E36E05F59EAB
E9A5F3B9D5EFE80A626EC11208557EEB5266FCE1148942647057FF8377622B6B
EBC27FC9545725BEE36D22172DEE790FCDD9C42994223176C8AD4AE06C90407F
C4278B3DBB8B8BF3918B41568BA9B79AC401C62D2A3449B671F2066967961B04
3320B4698E5AC8C709CB88A3B1B9D15E1D04A9CCFDB1A9598A22CAD06CB2E08F
F680F5B88821F2BA8AA8D7A4F6227720FCE02508B882374006A2FE06CE8FFA8E
637798E2EB3B31EAF3CD> |-
/g49 <1C60D8A8C9B88C0872290F0883B9567556744AB94A692140DECDB19C7F
9183C52202E112C962029CEA412F10DC99D029475074677F3D677D21C2E38497
70D29186E89A443178107B7B979E03BF864329C6E8DC674BE12711E9A3595FE7
E0D57E8EE09DC05AE27A67C4C0E43F358606FAA3D5DFC0EE> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/FMXLMX+LiberationSans /NJBAAA+LiberationSans findfont ct_VMDictPut
/FMXLMX+LiberationSans*1 
[3{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 18{/.notdef}rp /g29 /g30 /g31 /g32 /g33 /g34 
/g35 /g36 /g37 /g38 /g39 /g40 /g41 /g42 
/g43 /g44 /g45 /g46 /g47 /g48 /g49 206{/.notdef}rp]
FMXLMX+LiberationSans nf
FMXLMX+LiberationSans*1 [6.07169 0 0 -6.07169 0 0 ]msf
122.308 442.084 mo
(\035\012\011\007\036\006\011\037\007 \011\006\007!!\036"#\011$\010\007%\011\012##\004\005)
[4.38376 3.37586 1.68181 3.38197 3.03584 1.68181 1.68182 3.38197 3.37585 5.05766 1.68182 1.68793 
3.37585 3.03584 3.03584 3.03584 3.37585 3.03586 1.68793 1.3418 3.38197 3.37585 1.68181 1.68793 
3.37585 3.03586 3.03583 3.37587 0 ]xsh
122.635 449.557 mo
(\006&''\011"\036\007\037\007\006\007\006\011#\007\(\(\011\)\007\(\005&*\036+\006\007\037$%)
[1.68182 3.38197 3.37585 3.37585 1.68793 3.37585 3.03584 3.37587 3.37585 3.38197 1.68181 3.37585 
1.68793 1.68182 3.03584 3.37585 1.34792 1.3418 1.68793 1.68181 3.37587 1.34792 2.02182 3.38197 
3.37587 3.03583 1.68182 1.68793 3.37585 3.37585 1.34792 0 ]xsh
120.619 457.03 mo
(,$!\036\004\037\006\011\012##\004\005\011\007\(-*\011\012\011\010.\003\($#/\006. )
[3.03584 1.34792 3.03585 3.03584 3.37585 3.37585 1.68793 1.68181 3.37587 3.03584 3.03584 3.37585 
2.02794 1.68182 3.37585 1.34792 3.37585 3.38197 1.68181 3.37585 1.68794 3.37585 3.37585 3.37585 
1.34792 1.34792 3.03584 3.37585 1.68181 3.37585 0 ]xsh
121.46 464.503 mo
(#\007\005\007!-!\0110!\012#\011\012\011'\0071\007\(\007\037\006-!\007#\007\037)
[3.03584 3.37586 2.02794 3.37585 3.03584 3.37585 3.03586 1.68181 3.03584 3.03584 3.38197 3.03584 
1.68181 3.37585 1.68793 3.37587 3.37585 1.34792 3.37585 1.34792 3.37585 3.37587 1.68793 3.37585 
3.03583 3.37587 3.03584 3.37585 0 ]xsh
grestore
gsave
258.27 379.188 mo
270.415 379.188 li
270.415 391.333 li
258.27 391.333 li
258.27 379.188 li
clp
gsave
257.8 392.265 mo
271.345 392.265 li
271.345 378.72 li
257.8 378.72 li
257.8 392.265 li
clp
gsave
270.415 379.189 mo
270.415 379.189 270.414 379.189 270.414 379.189 cv
258.27 379.189 li
258.27 379.188 li
270.415 379.188 li
270.415 379.189 li
clp
258.27 379.188 mo
270.415 379.188 li
270.415 379.189 li
258.27 379.189 li
cp
gsave
/0 /CSA get_res setcolorspace
clp
[1.0005 0 0 -1.0005 0 842.162 ]ct
[13.0709 0 0 1.40045 257.671 461.808 ]ct
snap_to_device
<<
/T 1
/W 28 
/H 3 
/M[28 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!Z+n&Y!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Z+n&Y!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!^V@Ou!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!TrkGj!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!TrkGj!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!Xf\_-!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!Su8KX!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Su8KX!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!Vl-Gj!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!Q0.4o!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Q0.4o!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!k2tgg!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
269.947 391.333 mo
258.27 391.333 li
258.27 380.123 li
269.947 380.123 li
269.947 391.333 li
gsave
/0 /CSA get_res setcolorspace
clp
[1.0005 0 0 -1.0005 0 842.162 ]ct
[12.6041 0 0 12.1373 257.671 450.137 ]ct
snap_to_device
<<
/T 1
/W 27 
/H 26 
/M[27 0 0 -26 0 26 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gau(u@:6;_!UjC-r#%7:75$:[0?o/M%,EO@lA2^_=.4^!b*L^N60:juF'sTV2gFXC>i.GV0=kF30p!AK
*Cp]3*+T8p/6qm.$8=/=g+rCBZ<;C\oZfY3DW*a#44#]Q%7i(V(s"n&RCL+nOI;nRI,R(;adJQ#p41@2
'PHW<!Q#)m/UMYS7\O+QX#`5A5o@NEM1Oa7eUu'g-@Hk@]C7GY^*@D05KGUF^o8A##?$0qIt[0&nhXZ=
pJ76O-pdTYe=c[LA/6fjTo*Y'kn"Ou`9'XQ>%G;hZTr+H`soKPJ`/@S'r(:a81cH8nC[i[\FKm-r(0Jk
-,hK\&c?h.gsF^`_RSZblkG8a$`"Q14bV8'_(#2G`7bAmM_AoU<14&#4+7A<oWf6s:\!*CP/ETP6"U^L
,H`d/'Lna9#s!ut`5jO*kZ.?)ZVJ>;='jNAmio#Z-+[E1FX7;<[fMT.!0j?giooMJV`.]t&8D:iiug>t
U;@aO(h(ld%S!pc)J8!GaQ4:c\MKW>!Xo'DDZ\/~>

%%EndBinary
grestore
np
270.415 391.333 mo
269.947 391.333 li
269.947 380.123 li
258.27 380.123 li
258.27 379.189 li
270.414 379.189 li
270.414 379.189 270.415 379.189 270.415 379.189 cv
270.415 391.333 li
gsave
/0 /CSA get_res setcolorspace
clp
[1.0005 0 0 -1.0005 0 842.162 ]ct
[13.0709 0 0 13.0709 257.671 450.137 ]ct
snap_to_device
<<
/T 1
/W 28 
/H 28 
/M[28 0 0 -28 0 28 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
GauuY_.phP&H0%H:EH<eiZC^p6Ktc%>I;D-Pt%JpBGF4p7.::^5GX(knf?h#KBm,mG;b,]LBh73k.Tj#
b[uLAEtMO4O@InHh>SV@Ci[^lI_BSFU+5$OdI<#sPP%mpHl]\]F7#=QF2"4ur-MQs#PR^JjIG)GD<\FE
a51Bi0-W8e'P"tYo8q;CK?;mH.X\3f$XEBgJ&5jhp79F*GOPmR1Y,O^QL/r?Ska0&n^sUW3*Nr0Ius7G
DpgB%+\'`ZQS)o,*jmF-\\:nsK!SQ0FjDEkn!:#0=T,=gB1k0J]_SsfNS\\8B_'FOoln.I?C.^J=HecE
?TsYJMlVV8;nr7l4<//)1akS1RZuC.p.g8#MlNB<$YPjZs-/9sk?4A=Fl!(m.d#9)Ia@EqJfdtL;LKtE
_fVL^YoZ,8F8Vp5U2nFDeuO[p2_4q.If2&&^"PhW~>

%%EndBinary
grestore
np
grestore
grestore
gsave
139.637 343.223 mo
152.715 343.223 li
152.715 356.301 li
139.637 356.301 li
139.637 343.223 li
clp
gsave
138.702 357.236 mo
153.181 357.236 li
153.181 342.757 li
138.702 342.757 li
138.702 357.236 li
clp
152.715 356.301 mo
139.637 356.301 li
139.637 343.223 li
152.715 343.223 li
152.715 356.301 li
gsave
/0 /CSA get_res setcolorspace
clp
[1.0005 0 0 -1.0005 0 842.162 ]ct
[14.0045 0 0 14.0045 139.099 485.149 ]ct
snap_to_device
<<
/T 1
/W 30 
/H 30 
/M[30 0 0 -30 0 30 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb!!D>t\-o'Sa(7aIo1K"!a!X'*a(q1b`SS8VJJu5tFi1+7N<m6ARhTMP)XILl/!%S`pQH(E-.:hK[eI
ki2LMIE(uK29S.S1G`_s=Kkq8n,@R`hV4E216>+ra"oN.XjmsJh`e10C_q.Vaqu']@fEeU2suYU@qN>T
n1@DF(At0%M7W4P`T-+(qT;9L]LjK:)R[ZJCt?+2]m]PBr:Q1LP>.t"M5I/51<,'pPs_["0ph%b::J2O
Tt/)Q>:Xkm,,$^^r_S)oV"mV+LKmu?g=6=48kaXsB=b_"bBnF<1nV&3P<uFjVR?jG%a+V3Fl&OXD@>J;
0aH<9p:GQ%H\F8]p63bGk4?2D$W21C/3-`\cb&+>4(k_,eDAmtjLokY59kTG/+8h`Dc^Ra8Ju$%1$lNs
Vj?H^b'`9?em9o`ZoQo+Rb+\u3k2>_TC2(UI'UdD*cmV<AcAj?&jsE7'7>t0Em<*uFnG[+P*ba`LGP@6
c9?[$YPpduDp%\J=nI/I46I3q$[Fs9\'*XP#@&EAk#a]-4%e:198aHbgKe!nc^o3MY?i(FK:V`SL[?lT
29oXCHG):&=>-l9V"M9CV>KK:o4O7F^6(UBIfNOl\aBoPQ?(7@hM?AtPgjhoaL,ccN=ML8B_a3?pR\ad
hZ_kX.J:=]e<'ZEru_1LddL*#48@XTrN^F%?16_N>uC#Kr]O$'4\6r`8+u@Lq_3$gF.V7&eJ%VJ6`eRO
jH##3m;!LkRBq<i5qHM^ReO4!>59!7==O,0pM.M9)Z$pYTdQGUc6c\LjteoC](c1ogt_u2M[R%!~>

%%EndBinary
grestore
np
grestore
grestore
gsave
318.984 582.824 mo
331.129 582.824 li
331.129 594.969 li
318.984 594.969 li
318.984 582.824 li
clp
gsave
317.583 595.433 mo
332.062 595.433 li
332.062 581.888 li
317.583 581.888 li
317.583 595.433 li
clp
330.662 594.969 mo
326.646 594.969 li
326.646 594.514 li
318.984 594.514 li
318.984 583.291 li
330.662 583.291 li
330.662 594.969 li
gsave
/0 /CSA get_res setcolorspace
clp
[1.0005 0 0 -1.0005 0 842.162 ]ct
[12.6041 0 0 12.6041 318.357 246.605 ]ct
snap_to_device
<<
/T 1
/W 27 
/H 27 
/M[27 0 0 -27 0 27 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gau(u@:6;_!T2_]4+%"]jj-1/`$Ro+W>K4X$rb&;Iq^72@d&!o;FcZd^=!Du=16=:$8Q6lS-'Eu]YRg5
iVKusHdV3^M1O_ql9KY\iZL$BB&U&9;1O5Vd[%H,ONdjGajG5=n"JKeN^7EAit>rGa@ojt7`\8$0u!.I
QK67`/UK`pOclkUpqXIPcOS2J[&\4I#DY/BK@h;$O;tiX@e7M-[0uFIlT;CqnUiAk$(U9HEZd7'nOLZl
-9hS:FT8-SM@t"Q8.E015\AtQ+0*D:OUaZc6u8FtWC>AG1(.V>Enk&\*uHVO<$==&K@Jm9#G3"jN%9D9
b+Foo>>jg.(Vt%Abmg6"+H/t-aA.;"]0L-$fg@0)*1W118ZZ2?[J81i5c&`;[c;".5VHn=q%THL+?=7`
).XL+2rZ<^5[adFQ]TZU8;u=ZMI'jI4mNeuFle>%o.CY[=/,$"=''u-EZ5!=$p\M6-B;sbEdEAW!MMCO
1(KIW+Y&GUKb65VjC!)AW*q#*N*MsJQTKiA0#.H-T+n7~>

%%EndBinary
grestore
np
331.129 594.969 mo
330.662 594.969 li
330.662 583.291 li
318.984 583.291 li
318.984 582.824 li
331.129 582.824 li
331.129 594.969 li
gsave
/0 /CSA get_res setcolorspace
clp
[1.0005 0 0 -1.0005 0 842.162 ]ct
[13.0709 0 0 13.0709 318.357 246.605 ]ct
snap_to_device
<<
/T 1
/W 28 
/H 28 
/M[28 0 0 -28 0 28 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
GauuY_.phP&H0%H:EH<eiZC^p6Ktc%>I;D-Pt%JpBGF4p7.::^5GX(knf?h#KBm,mG;b,]LBh73k.Tj#
b[uLAEtMO4O@InHh>SV@Ci[^lI_BSFU+5$OdI<#sPP%mpHl]\]F7#=QF2"4ur-MQs#PR^JjIG)GD<\FE
a51Bi0-W8e'P"tYo8q;CK?;mH.X\3f$XEBgJ&5jhp79F*GOPmR1Y,O^QL/r?Ska0&n^sUW3*Nr0Ius7G
DpgB%+\'`ZQS)o,*jmF-\\:nsK!SQ0FjDEkn!:#0=T,=gB1k0J]_SsfNS\\8B_'FOoln.I?C.^J=HecE
?TsYJMlVV8;nr7l4<//)1akS1RZuC.p.g8#MlNB<$YPjZs-/9sk?4A=Fl!(m.d#9)Ia@EqJfdtL;LKtE
_fVL^YoZ,8F8Vp5U2nFDeuO[p2_4q.If2&&^"PhW~>

%%EndBinary
grestore
np
gsave
326.646 594.969 mo
318.984 594.969 li
318.984 594.514 li
326.646 594.514 li
326.646 594.969 li
clp
318.984 594.514 mo
326.646 594.514 li
326.646 594.969 li
318.984 594.969 li
cp
gsave
/0 /CSA get_res setcolorspace
clp
[1.0005 0 0 -1.0005 0 842.162 ]ct
[8.40272 0 0 1.40045 318.357 246.605 ]ct
snap_to_device
<<
/T 1
/W 18 
/H 3 
/M[18 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~4?P_g4?P_g4?P_g^V@Ou4?P_g4?P_g4?P_g4?V<3^Y(_34?P_g4?P_g4?P_gftY;T4?N~>
<~$k*OQ$k*OQ$k*OQXf\_-$k*OQ$k*OQ$k*OQ$k0ABXfr3B$k*OQ$k*OQ$k*OQYcY%3$k*~>
<~!!!!!!!!!!!!!!!Vl-Gj!!!!!!!!!!!!!!!!!%kRVhkBR!!!!!!!!!!!!!!!M5R8.!!!~>
<~!!!!!!!!!!!!!!!k2tgg!!!!!!!!!!!!!!!!!%r>k)03>!!!!!!!!!!!!!!!Mrs/[!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
1 dict begin
.74902 .678431 .654902 .901961 cmyk
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
310.578 599.637 mo
(\021!\037\005)
[2.80234 1.55807 2.80234 0 ]xsh
false sop
end
grestore
grestore
grestore
1 lj
307.773 565.543 mo
307.773 582.824 li
310.578 580.02 mo
307.773 582.824 li
304.973 580.02 li
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: PSIAAA+Arial-BoldMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PSIAAA+Arial-BoldMT def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g1 put
dup 2 /g2 put
dup 3 /g3 put
dup 4 /g4 put
dup 5 /g5 put
dup 6 /g6 put
dup 7 /g7 put
dup 8 /g8 put
dup 9 /g9 put
dup 10 /g10 put
dup 11 /g11 put
dup 12 /g12 put
dup 13 /g13 put
dup 14 /g14 put
def
/FontBBox {-628 -376 2034 1048} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
15 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/g1 <1C60D8A8C9B64EDFF4DB3154EF1496D6E24F0CAC281A26842F998257597
280DD1E6498DF18A9DA7D721D169321D8C5E0431AC7382FA4310DC48BBF78710
C6BC5247040A24ACAC01421F5FBDE686580BE547F54A1AA74DC005E8E5CD476A
95687DB199C1234EC19B3DCC9809D20AF7E582B47F9C3146B190D9EA96357C8C
75B37ED0E8A0609D6AA98D6ECE5CCE67035EEBD2539BAF0BB0A05B823E40DDAE
9B8EE162F6E47FABB31D9FF0B75F8D71F52C148E77FE80FB24454F3884141B00
9620C0B57EC496B1B9A1D8EA8A41DD33836FFD894AD961F351294F76A> |-
/g2 <1C60D8A8C9B6B41CBB10CBFB014CB2DAA60D1E6213C9A6221D8277F76E5
B198F877B8BD7F16B9ED33B8CC69F5CB1810DCABD4C90C49E0AA0E1EE> |-
/g3 <1C60D8A8C9B64EDFFB871F4BC81FBDF202F74A2A9990666F4653F156EEA
FD5D786BB69DEDB8B2E0A95C5AFB0A097> |-
/g4 <1C60D8A8C9B6079F6DCA0663EB737730AA5B536F6C6DD813B60E66ABDF7
6C173FB0AA7AA75663A2785C98A4A4A611F61872CB7CA29BB> |-
/g5 <1C60D8A8C9B854D0F45A9260868E9F30993A194AB723> |-
/g6 <1C60D8A8C9B7D8BE1956BCE10252E2B5E44265236D2FAF854B3B3BF8> |-
/g7 <1C60D8A8C9B5D6EF426B7217FEEEE61F478CB0D93BCB9F5136FC9DE8815
30058B00EED488C98C725E7D087D1A690AB16A11F6F46409BFE58D76932B9B20
729CB> |-
/g8 <1C60D8A8C9B7EF322BF270AB151730C1576B3DBF6DAC6B05EF7C7C2AC35
50E4D7D76EEB5EC00E2AE0B63EA674701E41362C9EF4C943E6044930A81C0288
C730E9CD4222EC82D37FE43450E9A846C17FEBAA9742B3180B655FFA4E0E014E
F214E09E7DE6E45A7476C6DEA21B47E198DDC2AD648DA39E6CBF2981071855AA
94524E4E0809AB2B25573430347DD> |-
/g9 <1C60D8A8C9B7D8BE1671B6042109CDB81BD17EE7497C90F9ACDA9D163AD
AFA6361E188897A4B68FD4101C0DFF9827C3E0810E4C104ADB26FCFB7392E3E6
6FDF7A9C86FBB82D51B276A3D658E1330F7C5C615410686D27E44BA9CDCA4212
076F89ABD511F1956BE19FF29EE6CBCC95AE9285DCCADBA7BCF7A3124FE7D2BC
7C3485D1834390BEE8C> |-
/g10 <1C60D8A8C9B7D8BE19809EC35BBBBC4A9DCDD5AC6ABFFD5901D001A83F
8CD3372E99> |-
/g11 <1C60D8A8C9B854D0F4565C5D96D196F316A2594284F4> |-
/g12 <1C60D8A8C9B81F2C5A71D50B9B0701F5A31E22DDFBF554FF2D149AB14D
DEFC1B9ADBD8105EC88497FBC09B03794C95967111EB4354C8578F0E04207510
7F9743D9A4F26007EA81109EB5443BB577E4EC9F8677529403BA64E3F5> |-
/g13 <1C60D8A8C9B7D8BE34A30C11766266259B98A0BA89715D82F7092153A6
228252D7594BDD75B2A7C57DC89088F8B1FFC43993725AE434A67B356F5F6B64
D528A1696640F00DD016EBC232B8C863EA85B4B724E805002B9447A61792050E
5F2AB51B8800BF6303526C74FB360B7027D54FFCEDAF13BF8EA7CB1A81691C0A
4FB25E1EA64C0904433C6A5F35BBF9DD5C4CBFC1A5> |-
/g14 <1C60D8A8C9B7D8BE193B13518E6892DBA9B266D0A17D5C8CBB8FCA3DEC
31FFDE21FB19188C5C709BB859EE16635D8123C09E9F6380448F624FEDEAFC78
CB8E4436A865BB0CB81152FE1F90E6EB1DE7D9B62F15D5F2855507D6B695B1CC
6AFD11F003818163793142F6A0F46BD84EFADF> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/FMXLMY+Arial-BoldMT /PSIAAA+Arial-BoldMT findfont ct_VMDictPut
/FMXLMY+Arial-BoldMT*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 241{/.notdef}rp]
FMXLMY+Arial-BoldMT nf
FMXLMY+Arial-BoldMT*1 [9.34106 0 0 -9.34106 0 0 ]msf
169.528 89.9297 mo
(\001\002\001\003\002\004\005\006)
[6.22115 7.78104 51.8335 6.22115 7.78104 6.74425 2.5874 0 ]xsh
414.263 89.9297 mo
(\007\010\011\012\010\013\010\014\015\016)
[8.6311 5.19363 36.5983 5.00674 5.19363 2.5874 5.19363 3.1199 5.68866 0 ]xsh
283.02 116.703 mo
292.363 93.3521 li
320.387 93.3521 li
329.727 116.703 li
320.387 140.055 li
292.363 140.055 li
cp
.233585 .0486458 0 0 cmyk
f
283.02 116.703 mo
292.363 93.3521 li
320.387 93.3521 li
329.727 116.703 li
320.387 140.055 li
292.363 140.055 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B7D8BE6A7F94325F206C3B7306093133236F88721A57C651AE
D7D941284023AB96A9C7135C4FD6CD273C575093F35A63052A0697> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 43 /F put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n /b /j /l 
/eacute /s /o /g /period /h /u /r 
/odieresis /iacute /A /d /aacute /i /k /v 
/m /slash /B /H /oacute /D /p /c 
/ohungarumlaut /f /udieresis /F 212{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
297.033 114.836 mo
(+"\003\032&&)
[3.42438 3.73834 1.55811 3.73273 3.11615 0 ]xsh
294.231 122.309 mo
("\007\016\007\017\007\014\006\()
[3.73834 3.11057 1.24982 3.1106 1.24423 3.11615 3.11618 1.55249 0 ]xsh
340.469 117.172 mo
349.809 93.816 li
377.832 93.816 li
387.176 117.172 li
377.832 140.523 li
349.809 140.523 li
cp
.233585 .0486458 0 0 cmyk
f
340.469 117.172 mo
349.809 93.816 li
377.832 93.816 li
387.176 117.172 li
377.832 140.523 li
349.809 140.523 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: NTMBAA+NimbusSansL AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMW+NimbusSansL dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B7D8BE6A7F943CCBC1C23D195D5A6D6CC15FB7C8CE2505EEFB
D5784BC9E8E8DC070C64500A6621> |-
/numbersign <1C60D8A8C9B7EF322B4619C41E8552425A2689F8CB513903E2B
336080D503F36BC307273A6C25FA4F00208065E2EF895F4E579DF5B73558958B
5C6802C68CDCCECC0EA6A97A553204B9BCCE93E3A9B266917B8D8A864FA69B26
3E358C7A3E3FA5DEB64BB50419C2E6EE48A78F74653CB7221E48387E8CD2CCD4
7754437B9372617980543FCD9113E3896BB233DCFFAE184DA711387F898933B4
360F5DAD97F972AEBFC0DFC1179D8332361EDEC2C303561E71D788EE31171033
541305D64498623> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMW+NimbusSansL /Encoding get
dup 44 /T put
dup 45 /numbersign put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMW+NimbusSansL*1 
[/.notdef /S /M /space /G /a /t /e 
/w /y /Udieresis /z /n /b /j /l 
/eacute /s /o /g /period /h /u /r 
/odieresis /iacute /A /d /aacute /i /k /v 
/m /slash /B /H /oacute /D /p /c 
/ohungarumlaut /f /udieresis /F /T /numbersign 210{/.notdef}rp]
FMXLMW+NimbusSansL nf
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
355.415 111.566 mo
(,\010\035\006\006\007\027)
[3.42438 4.04657 1.24423 1.55807 1.55807 3.11618 0 ]xsh
348.175 119.039 mo
(-\016\022\021\013\022\017\023\005\017\005\006)
[3.11618 1.24423 3.11057 2.80231 2.80792 3.1106 1.2442 3.11618 3.11618 1.24423 3.11057 0 
]xsh
344.439 126.512 mo
(-\016\022\021\013\022\017\023\005\017\005\006\024\025\026)
[3.11618 1.24423 3.11057 2.80231 2.80792 3.11057 1.24423 3.11618 3.11618 1.24423 3.11057 1.55811 
1.55807 3.11618 0 ]xsh
283.02 255.418 mo
329.727 255.418 li
329.727 292.781 li
283.02 292.781 li
cp
.233585 .0486458 0 0 cmyk
f
283.02 255.418 mo
329.727 255.418 li
329.727 292.781 li
283.02 292.781 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
288.86 264.76 mo
(\016\022\021\013\022\017\023\005\017\005\006\024\025\026)
[1.24423 3.11618 2.80231 2.80231 3.11618 1.24423 3.11057 3.11618 1.24423 3.11618 1.55807 1.55249 
3.11618 0 ]xsh
294.698 272.232 mo
(+"\003&\017\026\023\035\014)
[3.42438 3.73834 1.55807 3.1106 1.24982 3.1106 3.11615 1.24423 0 ]xsh
297.5 279.705 mo
(\012\013\007\014\007\006)
[4.04654 2.80234 3.11615 3.11618 3.11618 0 ]xsh
292.129 287.645 mo
(\020\027\036\007\013\006\007\006\020\021\007)
[3.11618 1.8663 2.80231 3.11618 2.80231 1.55249 3.11618 1.55807 3.1106 2.80231 0 ]xsh
306.375 140.055 mo
306.375 255.418 li
309.176 252.617 mo
306.375 255.418 li
303.57 252.617 li
.616266 .535912 .528435 .253666 cmyk
@
340.469 255.887 mo
387.176 255.887 li
387.176 293.25 li
340.469 293.25 li
cp
.233585 .0486458 0 0 cmyk
f
340.469 255.887 mo
387.176 255.887 li
387.176 293.25 li
340.469 293.25 li
cp
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
FMXLMW+NimbusSansL*1 [5.60463 0 0 -5.60463 0 0 ]msf
346.307 265.227 mo
(\016\022\021\013\022\017\023\005\017\005\006\024\025\026)
[1.24423 3.11618 2.80231 2.80231 3.11618 1.24423 3.11057 3.11618 1.24423 3.11618 1.55807 1.55249 
3.11618 0 ]xsh
347.241 272.7 mo
(,\010\035\006\006\007\027\003&\017\026\023\035\014)
[3.42438 4.04657 1.24423 1.55807 1.55807 3.11618 1.8663 1.55811 3.11615 1.24423 3.11618 3.11618 
1.24423 0 ]xsh
354.948 280.172 mo
(\012\013\007\014\007\006)
[4.04654 2.80234 3.11615 3.11618 3.11618 0 ]xsh
349.576 288.112 mo
(\020\027\036\007\013\006\007\006\020\021\007)
[3.11618 1.8663 2.80231 3.11618 2.80231 1.55249 3.11618 1.55807 3.1106 2.80231 0 ]xsh
363.82 140.523 mo
363.82 255.887 li
366.625 253.082 mo
363.82 255.887 li
361.02 253.082 li
.616266 .535912 .528435 .253666 cmyk
@
306.375 292.781 mo
306.375 297.453 li
247.059 315.203 li
247.059 319.871 li
249.859 317.07 mo
247.059 319.871 li
244.258 317.07 li
@
363.82 293.25 mo
363.82 297.922 li
247.059 315.203 li
247.059 319.871 li
249.859 317.07 mo
247.059 319.871 li
244.258 317.07 li
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: PSIAAA+Arial-BoldMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMY+Arial-BoldMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g15 <1C60D8A8C9B7D8BE164A384446DA6B7BAA798AC9D25A30491D373B778A
BEDC450E08B3A2A56A100F> |-
/g16 <1C60D8A8C9B7EF322B767253CD3BE18E6883E9BFEE680E471A3E543E6B
629FFE599C78BF6E9BC360B4FD3F4193BE88F8A133134BAA650EBC31A9DBCA73
D443463241F1A95A036612031AED6950283B0D14D29C497685C55C7946BF118B
40E370FC30C35C6DDC0B89863AEC8E7000DED8B394346462262BD43999923C02
BB76E45D38F5FACA7247DBA2EBA6371EEFDE7DB20E4C849532AD601D5FE565E2
F9524F3166F0EDA1C9CBD6F2D9FAE6CBD991E5FC9CACD3E5ACCC612FA46CAB68
3778C9E93119C2E309BBBA2FB6B108D4ACC24630A4E27912F2F48E37DD6F256C
920ECC30772CD6DD1CCCB84D330E3FAA> |-
/g17 <1C60D8A8C9B7EF32242001ABD2AFBBD336641D8D7284783472C96CFCC4
34DFC100FC24422711A9090DEA4D32109037578992AFF27835B7F260887A799C
BA44C497ED942D76A3A4BD63536DE6F757481EB22D2DEF055F331ED962220273
9AC583596554B76ADC212E19C7FBCE810B4022B5DAB3AF3C114AF2730DCBE9D3
5CB6B42E872730D77BAB> |-
/g18 <1C60D8A8C9B7EF322B75AAFD4DB9E7AD574572B7D2556469383B3D4CBB
5184BAC1997D5B0A13D1B495BE0C6B6EE29F273838B3F19F49> |-
/g19 <1C60D8A8C9B6FF86F52F235E29DFABF84E30A9E11A138D00DABF3BDDD9
B3E7FC257212EAD90E7CB4DBFFD0700E703890A66311DAD24CF380C3C480> |-
/g20 <1C60D8A8C9B854D0F456B21D2F64F910BA7B8B592C84A4B1CA21D58F66
78BEC800D8864E53D53A> |-
/g21 <1C60D8A8C9B81F2C3AD0BF8CA40D7105A9B3D27345F202DEBDE44606EF
D0E90137AE13DC9D19FB7B4ABCA40FDADEB59FF02A690A47D6F26E8BDAADCFC0
513C14FCD80BF39C6AFCEFE1132622D45FBB576E32F86682C5BCCAD00B4E7E37
5350009EFCA5AC835906F56B697B29> |-
/g22 <1C60D8A8C9B7361F02EEC91E54B85D1C77E667FE2BCF3D09A421FBF63C
B630EA2A0B7B19FFD8078B4DB5A7731C633809BCAB3FF296D65B89F29DE6B6DB
35AA635F12FEC0F1664A8FB613C79352FA72> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMY+Arial-BoldMT /Encoding get
dup 15 /g15 put
dup 16 /g16 put
dup 17 /g17 put
dup 18 /g18 put
dup 19 /g19 put
dup 20 /g20 put
dup 21 /g21 put
dup 22 /g22 put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMY+Arial-BoldMT*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 233{/.notdef}rp]
FMXLMY+Arial-BoldMT nf
FMXLMY+Arial-BoldMT*1 [9.34106 0 0 -9.34106 0 0 ]msf
286.291 89.9297 mo
(\017\020\021\010\011\015\015\022\012\023\024\025\025\010\026)
[5.69806 5.1936 5.19363 5.19363 5.68866 5.69803 5.69806 23.7169 5.00677 7.25793 2.5874 3.11993 
3.11047 5.19363 0 ]xsh
424.07 468.863 mo
424.07 473.531 li
307.773 514.164 li
307.773 518.836 li
310.578 516.035 mo
307.773 518.836 li
304.973 516.035 li
.616266 .535912 .528435 .253666 cmyk
@
.750271 .679713 .654902 .901945 cmyk
true set_gvm
%ADOBeginSubsetFont: PSIAAA+Arial-BoldMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
FMXLMY+Arial-BoldMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g23 <1C60D8A8C9B7EF322BCBE280C22367457BA30917BF0D1B07B12F1A04A9
C60A4874C9EE5DB3B90A588C5C07B1C8F3479DF10173E78C0C37BBC3FD504697
A6FABECEE626AD51A845B5C58CC51C8DFC4D1E3679BDE58DCC1C90> |-
/g24 <1C60D8A8C9B7D8BE34A30C11766266259B98A0BA89715D82F7092153A6
228252D7594BDD75B2A7C57DC89088F8B1FFC43993725AE434A67B356F5F6B64
D528A1696640F00DD016EBC232B8C863EA85B4B724E805002B9447A61792050E
5F2AB51B8800BF6303526C74FB360B7027D54FFCEDAF13BF8EA7CB1A81691C0A
4FB25E1EA64C0904433C6A5F35BBF9DD5C4CBFC15CBC7D8CFE14352B485627CA
10B19DC6AEE8C2> |-
/g25 <1C60D8A8C9B7EF322FE651D521834CDC537E3DD6EDE0ABF561677B8E07
6DDC9728066ABB56D1B743872DFE7AE020F0764CE3958A51AA0338BC1551D98A
E3FB37FA10E152AF1ED0A626D6C892D666067C463296034FB47068E23F64D994
06EC5C2C17229C4A63CE0EFA8720ACDB7F7406ADA1BC78971EA6415F06129169
2781A355051246F6EE6DC9DD910EE9B57ECB7AA0A970570176A3D15D1E3F2012
D47AFFA014792503A125E8700D4C4B9A85575792648D6CE60E59BBF3015C0285
B0> |-
/g26 <1C60D8A8C9B7A73DB6C93814944206976D2A85AE792F67705D9D865F89
9740CB11B68A6C1C749F5915602D5058F2A86B476A6822B64CC544489B63FB3F
85D273F63F39CF> |-
/g27 <1C60D8A8C9B7D8BE2780ECF91BB8FE73517B0190DDC8DBC9897295332E
6D8EF13268DE217D7EA63F2C2488BA6624154001DFCD86A24A51CFE6922F8614
F4FD4481342B3992244B419F0D448BA14CBCD530939FD538BD00615A031E3CBF
1609B0E4C3D7F5A051C575D052C1A51F88B318CA9D0C7CFDFA53AA8FB2F2EE27
4EE2F4C85657CA9E748262BB03EF446591D320994414EE439D72B9883F38366A
41CF501DCE32006C591422CCF439307E4D3088D90FF7CD2955301C96A46D1D15
45AF9D499025D541CB2077BD42919F91257F222D868E80527F0D65> |-
/g28 <1C60D8A8C9B7EF322B767253CD3BE18E6883E9BFEE680E471A3E543E6B
629FFE599C78BF6E9BC360B4FD3F4193BE88F8A133134BAA650EBC31A9DBCA73
D443463241F1A95A036612031AED6950283B0D14D29C497685C55C7946BF118B
40E370FC30C35C6DDC0B89863AEC8E7000DED8B394346462262BD43999923C02
BB76E45D38F5FACA7247DBA2EBA6371EEFDE7DB20E4C849532AD601D5FE565E2
F9524F3166F0EDA1C9CBD6F2D9FAE6CBD991E5FC9CACD3E5ACCC612FA46CAB68
3778C9E93119C2E309BBBA2FB6B108D4ACC24630A4E27912F2F48E37DD6F256C
920ECC30772CD6DD1CCCB84D330E3F9C40A2C59BE1E42BC99F528A06942EDE18
33> |-
/g29 <1C60D8A8C9B854D00D> |-
/g30 <1C60D8A8C9B854D0F451BA8D383A0A4936880A408467CE26A0F99BACDB
C01B35B2CCB6D45912AD8784A6DA0DF0EADE3D373CABF8E9FFB1CA2000E53A32
8BAEB03097C1BD28E9FB6365728A8FC94F2E57B5C9B461237DD62FCF8894B253
B98285AB8B8CE4111F04888F9685> |-
/g31 <1C60D8A8C9B7EF322BF270AB151730C1576B3DBF6DAC6B05EF7C7C2AC3
550E4D7D76EEB5EC00E2AE0B63EA674701E41362C9EF4C943E6044930A81C028
8C730E9CD4222EC82D37FE43450E9A846C17FEBAA9742B3180B655FFA4E0E014
EF214E09E7DE6E45A7476C6DEA21B47E198DDC2AD648DA39E6CBF2981071855A
A94524E4E0809AB2B25573430347E389B8FEB4D344454EFD5A8FF3A444B2CCAF> |-
/g32 <1C60D8A8C9B7EF322B7536945647B4BA07C8DC342FF58A782AE941212D
A936B500226D637B658433D28B8CA55D32CD6B9B1269E0231AED7EEAE92EA48D
1AB958BAD61D13401B6A794D4ED73191B8ADB547A985247846F2CB1E080C4F3C
74337DE0> |-
/g33 <1C60D8A8C9B59F85D96BFFA227AFC88923A0D1805E73B422C61096C748
C37D1E540D36A22F2B6BC6A899BC0DDFB70F833AC344264273BAAFC893B1FC9E
D217D777A23EE663B8B086E0514F75141042C5D3D73DD911F2D1CAF8A5CBE36B
AF59E972B9B495DB672C658FCC56CEAEBD4AEC19A01E1468C48C0E75D0E66471
7269A1A74C27B1C65DA4B01A0679EBF4AA6549A7814A2C66FB097D4B1C6FCCF6
29A056E668289EBF7379F0E89EA139501E> |-
/g34 <1C60D8A8C9B6079F41F9B95643AF5FE903607C9DACFA3D3EA8C772ADAD
2BCF4F6C9F19145BD925A2E09FA3F05182DCB7E2A8D036B1883E3E84C4FC0516
8672CF3B3570296CAFE67AB568F4A4000AF4E9956CF6B41F4848D12A0B39BA37
88A5178EB70302C775647AAA251C8AD614222C0E2945CC3654CF588C9F3A47F1
6F3022392F124BD24287E7BD9831D743E5B62ABCB4A32148A306C181EB> |-
/g35 <1C60D8A8C9B6079F41181ADFF82FD511AE28F2C86910E87A2408036CAE
220A294923EA0E343A2E6A98A318DE85DC7C76B01F1EC3BBDAB8243406F64AA6
0EC47C4740DC38CA972359346DC4F829F6F2F025BAF490F6C12F4FDEE6E00BC0
2718C2A815AF9445D30C8E56633A71FE0D0177EB4631ACBF3247225C96DE5557
42F231ACF12ABFAF7923DBF44FBF12BDB4408FA2F2BAEBD8E7E077E25AB5122D
52C15E7FE3C32CA90E2552D23E0B4ABA9EE9903B7FFBC9DA58DB417DC8D58F11
CC4F5D7250D4EBACD68EE666FFFB942A580FB288> |-
/g36 <1C60D8A8C9B854D0F4565C5CBCE72230219655E07F91D87D0662986620
5A854F4B71EBAEFFF4DE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FMXLMY+Arial-BoldMT /Encoding get
dup 23 /g23 put
dup 24 /g24 put
dup 25 /g25 put
dup 26 /g26 put
dup 27 /g27 put
dup 28 /g28 put
dup 29 /g29 put
dup 30 /g30 put
dup 31 /g31 put
dup 32 /g32 put
dup 33 /g33 put
dup 34 /g34 put
dup 35 /g35 put
dup 36 /g36 put
pop
%ADOEndSubsetFont
reset_gvm
/FMXLMY+Arial-BoldMT*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 /g33 /g34 /g35 /g36 219{/.notdef}rp]
FMXLMY+Arial-BoldMT nf
FMXLMY+Arial-BoldMT*1 [14.9457 0 0 -14.9457 0 0 ]msf
207.826 54.9008 mo
(\027\030\031\032\015\013\033\034\013\020\025\035\011\010\036\010\013\010\016\025\037\031\010\022\035\014\015\013 \020!\020\025\020)
[8.3098 9.11688 8.3098 7.47285 9.10184 4.15489 9.10182 8.30981 4.13986 8.30978 4.99185 4.13986 
9.11688 8.29474 4.15491 8.29477 4.15488 8.29477 9.11688 4.99185 8.29474 8.30981 8.30978 8.30981 
4.13983 4.97681 9.11688 4.13986 8.30978 8.30981 13.2869 8.30978 4.97681 0 ]xsh
FMXLMY+Arial-BoldMT*1 [0 -14.9457 -14.9457 0 0 0 ]msf
79.5115 286.996 mo
("\032\010\016\010\025\010\022\035\037\026\022\010\032\025\010\025\037\031\010)
[-10.7908 -7.47284 -8.30981 -9.11688 -8.30981 -4.97681 -8.30981 -8.30981 -4.13983 -8.30981 -5.81396 -8.30981 
-8.30981 -7.47284 -4.97681 -8.30981 -4.97681 -8.30981 -8.30975 0 ]ysh
82.3139 505.109 mo
(#\010\036\010\013\010\016\025\037\031\010\022\035\022\037\031\032$\025\037\031\010)
[-10.7908 -8.30978 -4.13986 -8.30981 -4.13983 -8.30981 -9.11688 -4.97681 -8.30978 -8.30981 -8.29474 -8.30981 
-4.13986 -8.30978 -8.30978 -8.30981 -7.47284 -4.13986 -4.97681 -8.30978 -8.30981 0 ]ysh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
